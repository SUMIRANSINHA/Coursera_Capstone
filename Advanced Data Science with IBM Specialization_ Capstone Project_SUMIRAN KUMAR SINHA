{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<h1 align=center><font size = 6>Advanced Data Science Capstone Project</font></h1>\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Table of contents\n\n1. [Introduction](#intro)<br>\n2. [Downloading the data set](#getdata)<br>\n3. [ETL](#etl)<br>\n4. [Data Wrangling and EDA](#prepare)<br>\n5. [Feature Engineering](#feature)<br>\n6. [Build Classification models](#model)<br>\n (A). [Machine Learning Models](#ml)<br>\n (B). [Deep learning Model](#dl)<br>\n7. [Model Evaluation and confirm best model](#test)<br>\n8. [Model Evaluation through vizualization](#visu)<br>\n9. [Tuning the best classifier](#tuning)<br>\n10. [Predicting and visualizing prediction results](#pred)<br>\n11. [Insights](#insights)<br>\n12. [Conclusion and future directions](#conclusion)<br>"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id=\"intro\"></a>\n## 1. Introduction <br>"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Traditionally, number of news paper sold would decide popularity of a news paper. But the digitization of news, has changed the notion of popularity \nNow, popularity  is expressed by investigating the number of interactions in the web and social networks, for example, click-through rate, number of shares, likes, and retweets.<br>\n\nPopularity prediction has tremendous impacts in many areas:<br>\n - In advertising<br>\n - For news aggregators (like Google News )<br>\n - Makes people feel connected<br>\n\n \nChallenges:<br>\n - Different factors make prediction difficult, like relevance of content to users <br>\n - Predicting complex social interactions and information cascades at the microscopic level  if difficult<br>\n - Impact of local and geographical conditions<br>\n\nHere, I will try to create a model that would predict popularity of an article before publication\n\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id=\"getdata\"></a>\n## 2. Downloading the data set <br>\nThe dataset is downloaded from [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets/Online+News+Popularity)"
        },
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Waiting for a Spark session to start...\nSpark Initialization Done! ApplicationId = app-20200605042522-0000\nKERNEL_ID = 6ce36e32-ec2c-4305-9327-02b821f88890\nrm: cannot remove 'OnlineNewsPopularity/OnlineNewsPopularity.names': No such file or directory\nrm: cannot remove 'OnlineNewsPopularity/OnlineNewsPopularity.csv': No such file or directory\nrm: cannot remove 'OnlineNewsPopularity.zip': No such file or directory\n--2020-06-05 04:25:25--  https://archive.ics.uci.edu/ml/machine-learning-databases/00332/OnlineNewsPopularity.zip\nResolving archive.ics.uci.edu (archive.ics.uci.edu)... 128.195.10.252\nConnecting to archive.ics.uci.edu (archive.ics.uci.edu)|128.195.10.252|:443... connected.\nWARNING: cannot verify archive.ics.uci.edu's certificate, issued by '/C=US/ST=MI/L=Ann Arbor/O=Internet2/OU=InCommon/CN=InCommon RSA Server CA':\n  Issued certificate has expired.\nHTTP request sent, awaiting response... 200 OK\nLength: 7476401 (7.1M) [application/x-httpd-php]\nSaving to: 'OnlineNewsPopularity.zip'\n\n100%[======================================>] 7,476,401   5.69MB/s   in 1.3s   \n\n2020-06-05 04:25:27 (5.69 MB/s) - 'OnlineNewsPopularity.zip' saved [7476401/7476401]\n\nArchive:  OnlineNewsPopularity.zip\n   creating: OnlineNewsPopularity/\n  inflating: OnlineNewsPopularity/OnlineNewsPopularity.names  \n  inflating: OnlineNewsPopularity/OnlineNewsPopularity.csv  \n"
                }
            ],
            "source": "! rm OnlineNewsPopularity/OnlineNewsPopularity.names\n! rm OnlineNewsPopularity/OnlineNewsPopularity.csv\n! rm OnlineNewsPopularity.zip\n\n! wget --no-check-certificate https://archive.ics.uci.edu/ml/machine-learning-databases/00332/OnlineNewsPopularity.zip\n! unzip OnlineNewsPopularity.zip\n# !pip install --user --upgrade pixiedust\n# !pip install --user --upgrade pixiedust"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Importing Modules"
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "Using TensorFlow backend.\n"
                },
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Collecting elephas\n  Downloading https://files.pythonhosted.org/packages/d9/f7/4b1542d95ad17fefff5cfbc0df732f8b082c758ed48d1738768df5cec4da/elephas-0.4.3-py3-none-any.whl\nCollecting tensorflow (from elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3d/be/679ce5254a8c8d07470efb4a4c00345fae91f766e64f1c2aece8796d7218/tensorflow-2.2.0-cp36-cp36m-manylinux2010_x86_64.whl (516.2MB)\n\u001b[K    100% |################################| 516.2MB 64kB/s  eta 0:00:01\n\u001b[?25hCollecting cython (from elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b0/37/13249e34be215c30b4dbfcd890c5ab719a01b252288260e0cf3035ce130f/Cython-0.29.19-cp36-cp36m-manylinux1_x86_64.whl (2.0MB)\n\u001b[K    100% |################################| 2.0MB 3.8MB/s eta 0:00:01\n\u001b[?25hCollecting keras (from elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ad/fd/6bfe87920d7f4fd475acd28500a42482b6b84479832bdc0fe9e589a60ceb/Keras-2.3.1-py2.py3-none-any.whl (377kB)\n\u001b[K    100% |################################| 378kB 5.4MB/s eta 0:00:01\n\u001b[?25hCollecting six (from elephas)\n  Downloading https://files.pythonhosted.org/packages/ee/ff/48bde5c0f013094d729fe4b0316ba2a24774b3ff1c52d924a8a4cb04078a/six-1.15.0-py2.py3-none-any.whl\nCollecting pyspark (from elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9a/5a/271c416c1c2185b6cb0151b29a91fff6fcaed80173c8584ff6d20e46b465/pyspark-2.4.5.tar.gz (217.8MB)\n\u001b[K    100% |################################| 217.8MB 146kB/s eta 0:00:01\n\u001b[?25hCollecting hyperas (from elephas)\n  Downloading https://files.pythonhosted.org/packages/04/34/87ad6ffb42df9c1fa9c4c906f65813d42ad70d68c66af4ffff048c228cd4/hyperas-0.4.1-py3-none-any.whl\nCollecting flask (from elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f2/28/2a03252dfb9ebf377f40fba6a7841b47083260bf8bd8e737b0c6952df83f/Flask-1.1.2-py2.py3-none-any.whl (94kB)\n\u001b[K    100% |################################| 102kB 6.2MB/s ta 0:00:01\n\u001b[?25hCollecting grpcio>=1.8.6 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/cd/04/2b67f0a3645481235d5547891fd0e45e384f1ae5676788f24a7c8735b4e9/grpcio-1.29.0-cp36-cp36m-manylinux2010_x86_64.whl (3.0MB)\n\u001b[K    100% |################################| 3.0MB 3.5MB/s eta 0:00:01\n\u001b[?25hCollecting gast==0.3.3 (from tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/d6/84/759f5dd23fec8ba71952d97bcc7e2c9d7d63bdc582421f3cd4be845f0c98/gast-0.3.3-py2.py3-none-any.whl\nCollecting numpy<2.0,>=1.16.0 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b3/a9/b1bc4c935ed063766bce7d3e8c7b20bd52e515ff1c732b02caacf7918e5a/numpy-1.18.5-cp36-cp36m-manylinux1_x86_64.whl (20.1MB)\n\u001b[K    100% |################################| 20.1MB 1.3MB/s eta 0:00:01\n\u001b[?25hCollecting wrapt>=1.11.1 (from tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/82/f7/e43cefbe88c5fd371f4cf0cf5eb3feccd07515af9fd6cf7dbf1d1793a797/wrapt-1.12.1.tar.gz\nCollecting tensorboard<2.3.0,>=2.2.0 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1d/74/0a6fcb206dcc72a6da9a62dd81784bfdbff5fedb099982861dc2219014fb/tensorboard-2.2.2-py3-none-any.whl (3.0MB)\n\u001b[K    100% |################################| 3.0MB 4.3MB/s eta 0:00:01\n\u001b[?25hCollecting wheel>=0.26; python_version >= \"3\" (from tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/8c/23/848298cccf8e40f5bbb59009b32848a4c38f4e7f3364297ab3c3e2e2cd14/wheel-0.34.2-py2.py3-none-any.whl\nCollecting scipy==1.4.1; python_version >= \"3\" (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/dc/29/162476fd44203116e7980cfbd9352eef9db37c49445d1fec35509022f6aa/scipy-1.4.1-cp36-cp36m-manylinux1_x86_64.whl (26.1MB)\n\u001b[K    100% |################################| 26.1MB 1.0MB/s eta 0:00:01\n\u001b[?25hCollecting tensorflow-estimator<2.3.0,>=2.2.0 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a4/f5/926ae53d6a226ec0fda5208e0e581cffed895ccc89e36ba76a8e60895b78/tensorflow_estimator-2.2.0-py2.py3-none-any.whl (454kB)\n\u001b[K    100% |################################| 460kB 5.6MB/s eta 0:00:01\n\u001b[?25hCollecting absl-py>=0.7.0 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1a/53/9243c600e047bd4c3df9e69cfabc1e8004a82cac2e0c484580a78a94ba2a/absl-py-0.9.0.tar.gz (104kB)\n\u001b[K    100% |################################| 112kB 8.0MB/s eta 0:00:01\n\u001b[?25hCollecting opt-einsum>=2.3.2 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/63/a5/e6c07b08b934831ccb8c98ee335e66b7761c5754ee3cabfe4c11d0b1af28/opt_einsum-3.2.1-py3-none-any.whl (63kB)\n\u001b[K    100% |################################| 71kB 4.0MB/s eta 0:00:01\n\u001b[?25hCollecting termcolor>=1.1.0 (from tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/8a/48/a76be51647d0eb9f10e2a4511bf3ffb8cc1e6b14e9e4fab46173aa79f981/termcolor-1.1.0.tar.gz\nCollecting h5py<2.11.0,>=2.10.0 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/60/06/cafdd44889200e5438b897388f3075b52a8ef01f28a17366d91de0fa2d05/h5py-2.10.0-cp36-cp36m-manylinux1_x86_64.whl (2.9MB)\n\u001b[K    100% |################################| 2.9MB 4.2MB/s eta 0:00:01\n\u001b[?25hCollecting google-pasta>=0.1.8 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a3/de/c648ef6835192e6e2cc03f40b19eeda4382c49b5bafb43d88b931c4c74ac/google_pasta-0.2.0-py3-none-any.whl (57kB)\n\u001b[K    100% |################################| 61kB 3.7MB/s eta 0:00:01\n\u001b[?25hCollecting keras-preprocessing>=1.1.0 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/79/4c/7c3275a01e12ef9368a892926ab932b33bb13d55794881e3573482b378a7/Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42kB)\n\u001b[K    100% |################################| 51kB 819kB/s eta 0:00:01\n\u001b[?25hCollecting astunparse==1.6.3 (from tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/2b/03/13dde6512ad7b4557eb792fbcf0c653af6076b81e5941d36ec61f7ce6028/astunparse-1.6.3-py2.py3-none-any.whl\nCollecting protobuf>=3.8.0 (from tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/28/05/9867ef8eafd12265267bee138fa2c46ebf34a276ea4cbe184cba4c606e8b/protobuf-3.12.2-cp36-cp36m-manylinux1_x86_64.whl (1.3MB)\n\u001b[K    100% |################################| 1.3MB 5.4MB/s eta 0:00:01\n\u001b[?25hCollecting keras-applications>=1.0.6 (from keras->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/71/e3/19762fdfc62877ae9102edf6342d71b28fbfd9dea3d2f96a882ce099b03f/Keras_Applications-1.0.8-py3-none-any.whl (50kB)\n\u001b[K    100% |################################| 51kB 3.9MB/s eta 0:00:01\n\u001b[?25hCollecting pyyaml (from keras->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/64/c2/b80047c7ac2478f9501676c988a5411ed5572f35d1beff9cae07d321512c/PyYAML-5.3.1.tar.gz (269kB)\n\u001b[K    100% |################################| 276kB 7.7MB/s eta 0:00:01\n\u001b[?25hCollecting py4j==0.10.7 (from pyspark->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e3/53/c737818eb9a7dc32a7cd4f1396e787bd94200c3997c72c1dbe028587bd76/py4j-0.10.7-py2.py3-none-any.whl (197kB)\n\u001b[K    100% |################################| 204kB 7.2MB/s eta 0:00:01\n\u001b[?25hCollecting hyperopt (from hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/90/d5/c7e276f4f7bc65ac26391c435245e5ef8911b4393e3df5a74906c48afeaf/hyperopt-0.2.4-py2.py3-none-any.whl (964kB)\n\u001b[K    100% |################################| 972kB 5.8MB/s eta 0:00:01\n\u001b[?25hCollecting jupyter (from hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/83/df/0f5dd132200728a86190397e1ea87cd76244e42d39ec5e88efd25b2abd7e/jupyter-1.0.0-py2.py3-none-any.whl\nCollecting nbconvert (from hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/79/6c/05a569e9f703d18aacb89b7ad6075b404e8a4afde2c26b73ca77bb644b14/nbconvert-5.6.1-py2.py3-none-any.whl (455kB)\n\u001b[K    100% |################################| 460kB 6.6MB/s eta 0:00:01\n\u001b[?25hCollecting nbformat (from hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d5/3c/251cfe5e3c9545ece107d342909ee3822d8cd9f3f11a591df37baeff2089/nbformat-5.0.6-py3-none-any.whl (170kB)\n\u001b[K    100% |################################| 174kB 6.8MB/s eta 0:00:01\n\u001b[?25hCollecting entrypoints (from hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/ac/c6/44694103f8c221443ee6b0041f69e2740d89a25641e62fb4f2ee568f2f9c/entrypoints-0.3-py2.py3-none-any.whl\nCollecting Jinja2>=2.10.1 (from flask->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/30/9e/f663a2aa66a09d838042ae1a2c5659828bb9b41ea3a6efa20a20fd92b121/Jinja2-2.11.2-py2.py3-none-any.whl (125kB)\n\u001b[K    100% |################################| 133kB 6.7MB/s eta 0:00:01\n\u001b[?25hCollecting Werkzeug>=0.15 (from flask->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/cc/94/5f7079a0e00bd6863ef8f1da638721e9da21e5bacee597595b318f71d62e/Werkzeug-1.0.1-py2.py3-none-any.whl (298kB)\n\u001b[K    100% |################################| 307kB 7.2MB/s eta 0:00:01###  | 286kB 72.5MB/s eta 0:00:01\n\u001b[?25hCollecting click>=5.1 (from flask->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d2/3d/fa76db83bf75c4f8d338c2fd15c8d33fdd7ad23a9b5e57eb6c5de26b430e/click-7.1.2-py2.py3-none-any.whl (82kB)\n\u001b[K    100% |################################| 92kB 6.6MB/s eta 0:00:01\n\u001b[?25hCollecting itsdangerous>=0.24 (from flask->elephas)\n  Downloading https://files.pythonhosted.org/packages/76/ae/44b03b253d6fade317f32c24d100b3b35c2239807046a4c953c7b89fa49e/itsdangerous-1.1.0-py2.py3-none-any.whl\nCollecting google-auth<2,>=1.6.3 (from tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/4d/0e/a67880c055a835eee920ab0aba6a968ec954941c923ab36186586ac56896/google_auth-1.16.1-py2.py3-none-any.whl (90kB)\n\u001b[K    100% |################################| 92kB 6.5MB/s eta 0:00:01\n\u001b[?25hCollecting setuptools>=41.0.0 (from tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/95/95/f657b6e17f00c3f35b5f68b10e46c3a43af353d8856bd57bfcfb1dbb3e92/setuptools-47.1.1-py3-none-any.whl (583kB)\n\u001b[K    100% |################################| 583kB 6.3MB/s eta 0:00:01\n\u001b[?25hCollecting google-auth-oauthlib<0.5,>=0.4.1 (from tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/7b/b8/88def36e74bee9fce511c9519571f4e485e890093ab7442284f4ffaef60b/google_auth_oauthlib-0.4.1-py2.py3-none-any.whl\nCollecting markdown>=2.6.8 (from tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a4/63/eaec2bd025ab48c754b55e8819af0f6a69e2b1e187611dd40cbbe101ee7f/Markdown-3.2.2-py3-none-any.whl (88kB)\n\u001b[K    100% |################################| 92kB 6.4MB/s eta 0:00:01\n\u001b[?25hCollecting tensorboard-plugin-wit>=1.6.0 (from tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/51/cd/a0c1f9e4582ea64dddf76c1b808b318d01e3b858a51c715bffab1016ecc7/tensorboard_plugin_wit-1.6.0.post3-py3-none-any.whl (777kB)\n\u001b[K    100% |################################| 778kB 6.4MB/s eta 0:00:01\n\u001b[?25hCollecting requests<3,>=2.21.0 (from tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1a/70/1935c770cb3be6e3a8b78ced23d7e0f3b187f5cbfab4749523ed65d7c9b1/requests-2.23.0-py2.py3-none-any.whl (58kB)\n\u001b[K    100% |################################| 61kB 4.9MB/s eta 0:00:01\n\u001b[?25hCollecting tqdm (from hyperopt->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f3/76/4697ce203a3d42b2ead61127b35e5fcc26bba9a35c03b32a2bd342a4c869/tqdm-4.46.1-py2.py3-none-any.whl (63kB)\n\u001b[K    100% |################################| 71kB 5.5MB/s eta 0:00:01\n\u001b[?25hCollecting future (from hyperopt->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/45/0b/38b06fd9b92dc2b68d58b75f900e97884c45bedd2ff83203d933cf5851c9/future-0.18.2.tar.gz (829kB)\n\u001b[K    100% |################################| 829kB 7.2MB/s eta 0:00:01\n\u001b[?25hCollecting cloudpickle (from hyperopt->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/c6/a5/bb99276ec2685e11d34e4aefc0d9238626843ea51f974aa59c68317d34b2/cloudpickle-1.4.1-py3-none-any.whl\nCollecting networkx>=2.2 (from hyperopt->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/41/8f/dd6a8e85946def36e4f2c69c84219af0fa5e832b018c970e92f2ad337e45/networkx-2.4-py3-none-any.whl (1.6MB)\n\u001b[K    100% |################################| 1.6MB 5.2MB/s eta 0:00:01\n\u001b[?25hCollecting ipywidgets (from jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/56/a0/dbcf5881bb2f51e8db678211907f16ea0a182b232c591a6d6f276985ca95/ipywidgets-7.5.1-py2.py3-none-any.whl (121kB)\n\u001b[K    100% |################################| 122kB 7.6MB/s eta 0:00:01\n\u001b[?25hCollecting ipykernel (from jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/61/18/f2350f0396fca562c22f880e25d668eaf6de129b6a56bf5b6786796a12e1/ipykernel-5.3.0-py3-none-any.whl (119kB)\n\u001b[K    100% |################################| 122kB 7.1MB/s eta 0:00:01\n\u001b[?25hCollecting notebook (from jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b1/f1/0a67f09ef53a342403ffa66646ee39273e0ac79ffa5de5dbe2f3e28b5bdf/notebook-6.0.3-py3-none-any.whl (9.7MB)\n\u001b[K    100% |################################| 9.7MB 2.1MB/s eta 0:00:01\n\u001b[?25hCollecting qtconsole (from jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/61/9c/ee26b844381f0cf2ea24bd822e4a9ed2c7fd6d8cdeef63be459c62132f9b/qtconsole-4.7.4-py2.py3-none-any.whl (118kB)\n\u001b[K    100% |################################| 122kB 7.3MB/s eta 0:00:01\n\u001b[?25hCollecting jupyter-console (from jupyter->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/0a/89/742fa5a80b552ffcb6a8922712697c6e6828aee7b91ee4ae2b79f00f8401/jupyter_console-6.1.0-py2.py3-none-any.whl\nCollecting bleach (from nbconvert->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9a/1e/7d6cb3b27cd2c490558349ca5d5cc05b390b017da1c704cac807ac8bd9fb/bleach-3.1.5-py2.py3-none-any.whl (151kB)\n\u001b[K    100% |################################| 153kB 7.9MB/s eta 0:00:01\n\u001b[?25hCollecting mistune<2,>=0.8.1 (from nbconvert->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/09/ec/4b43dae793655b7d8a25f76119624350b4d65eb663459eb9603d7f1f0345/mistune-0.8.4-py2.py3-none-any.whl\nCollecting pandocfilters>=1.4.1 (from nbconvert->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/4c/ea/236e2584af67bb6df960832731a6e5325fd4441de001767da328c33368ce/pandocfilters-1.4.2.tar.gz\nCollecting pygments (from nbconvert->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/2d/68/106af3ae51daf807e9cdcba6a90e518954eb8b70341cee52995540a53ead/Pygments-2.6.1-py3-none-any.whl (914kB)\n\u001b[K    100% |################################| 921kB 6.5MB/s eta 0:00:01\n\u001b[?25hCollecting jupyter-core (from nbconvert->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/63/0d/df2d17cdf389cea83e2efa9a4d32f7d527ba78667e0153a8e676e957b2f7/jupyter_core-4.6.3-py2.py3-none-any.whl (83kB)\n\u001b[K    100% |################################| 92kB 7.4MB/s eta 0:00:01\n\u001b[?25hCollecting defusedxml (from nbconvert->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/06/74/9b387472866358ebc08732de3da6dc48e44b0aacd2ddaa5cb85ab7e986a2/defusedxml-0.6.0-py2.py3-none-any.whl\nCollecting testpath (from nbconvert->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1b/9e/1a170feaa54f22aeb5a5d16c9015e82234275a3c8ab630b552493f9cb8a9/testpath-0.4.4-py2.py3-none-any.whl (163kB)\n\u001b[K    100% |################################| 174kB 8.0MB/s eta 0:00:01\n\u001b[?25hCollecting traitlets>=4.2 (from nbconvert->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ca/ab/872a23e29cec3cf2594af7e857f18b687ad21039c1f9b922fac5b9b142d5/traitlets-4.3.3-py2.py3-none-any.whl (75kB)\n\u001b[K    100% |################################| 81kB 6.1MB/s eta 0:00:01\n\u001b[?25hCollecting ipython-genutils (from nbformat->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/fa/bc/9bd3b5c2b4774d5f33b2d544f1460be9df7df2fe42f352135381c347c69a/ipython_genutils-0.2.0-py2.py3-none-any.whl\nCollecting jsonschema!=2.5.0,>=2.4 (from nbformat->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/c5/8f/51e89ce52a085483359217bc72cdbf6e75ee595d5b1d4b5ade40c7e018b8/jsonschema-3.2.0-py2.py3-none-any.whl (56kB)\n\u001b[K    100% |################################| 61kB 5.4MB/s eta 0:00:01\n\u001b[?25hCollecting MarkupSafe>=0.23 (from Jinja2>=2.10.1->flask->elephas)\n  Downloading https://files.pythonhosted.org/packages/b2/5f/23e0023be6bb885d00ffbefad2942bc51a620328ee910f64abe5a8d18dd1/MarkupSafe-1.1.1-cp36-cp36m-manylinux1_x86_64.whl\nCollecting pyasn1-modules>=0.2.1 (from google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/95/de/214830a981892a3e286c3794f41ae67a4495df1108c3da8a9f62159b9a9d/pyasn1_modules-0.2.8-py2.py3-none-any.whl (155kB)\n\u001b[K    100% |################################| 163kB 6.8MB/s eta 0:00:01\n\u001b[?25hCollecting rsa<4.1,>=3.1.4 (from google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/02/e5/38518af393f7c214357079ce67a317307936896e961e35450b70fad2a9cf/rsa-4.0-py2.py3-none-any.whl\nCollecting cachetools<5.0,>=2.0.0 (from google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/b3/59/524ffb454d05001e2be74c14745b485681c6ed5f2e625f71d135704c0909/cachetools-4.1.0-py3-none-any.whl\nCollecting requests-oauthlib>=0.7.0 (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/a3/12/b92740d845ab62ea4edf04d2f4164d82532b5a0b03836d4d4e71c6f3d379/requests_oauthlib-1.3.0-py2.py3-none-any.whl\nCollecting importlib-metadata; python_version < \"3.8\" (from markdown>=2.6.8->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/ad/e4/891bfcaf868ccabc619942f27940c77a8a4b45fd8367098955bb7e152fb1/importlib_metadata-1.6.0-py2.py3-none-any.whl\nCollecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e1/e5/df302e8017440f111c11cc41a6b432838672f5a70aa29227bf58149dc72f/urllib3-1.25.9-py2.py3-none-any.whl (126kB)\n\u001b[K    100% |################################| 133kB 6.7MB/s eta 0:00:01\n\u001b[?25hCollecting chardet<4,>=3.0.2 (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl (133kB)\n\u001b[K    100% |################################| 143kB 7.8MB/s eta 0:00:01\n\u001b[?25hCollecting certifi>=2017.4.17 (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/57/2b/26e37a4b034800c960a00c4e1b3d9ca5d7014e983e6e729e33ea2f36426c/certifi-2020.4.5.1-py2.py3-none-any.whl (157kB)\n\u001b[K    100% |################################| 163kB 7.1MB/s eta 0:00:01\n\u001b[?25hCollecting idna<3,>=2.5 (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/89/e3/afebe61c546d18fb1709a61bee788254b40e736cff7271c7de5de2dc4128/idna-2.9-py2.py3-none-any.whl (58kB)\n\u001b[K    100% |################################| 61kB 4.4MB/s eta 0:00:01\n\u001b[?25hCollecting decorator>=4.3.0 (from networkx>=2.2->hyperopt->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/ed/1b/72a1821152d07cf1d8b6fce298aeb06a7eb90f4d6d41acec9861e7cc6df0/decorator-4.4.2-py2.py3-none-any.whl\nCollecting ipython>=4.0.0; python_version >= \"3.3\" (from ipywidgets->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/aa/e8/47fda10c3ab103d9d4a667b40da9afd542c4e50aeb00c861b4eee5bb4e8f/ipython-7.15.0-py3-none-any.whl (783kB)\n\u001b[K    100% |################################| 788kB 6.2MB/s eta 0:00:01\n\u001b[?25hCollecting widgetsnbextension~=3.5.0 (from ipywidgets->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/6c/7b/7ac231c20d2d33c445eaacf8a433f4e22c60677eb9776c7c5262d7ddee2d/widgetsnbextension-3.5.1-py2.py3-none-any.whl (2.2MB)\n\u001b[K    100% |################################| 2.2MB 4.8MB/s eta 0:00:01\n\u001b[?25hCollecting jupyter-client (from ipykernel->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/34/0b/2ebddf775f558158ca8df23b35445fb15d4b1558a9e4a03bc7e75b13476e/jupyter_client-6.1.3-py3-none-any.whl (106kB)\n\u001b[K    100% |################################| 112kB 7.3MB/s eta 0:00:01\n\u001b[?25hCollecting tornado>=4.2 (from ipykernel->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/95/84/119a46d494f008969bf0c775cb2c6b3579d3c4cc1bb1b41a022aa93ee242/tornado-6.0.4.tar.gz (496kB)\n\u001b[K    100% |################################| 501kB 6.7MB/s eta 0:00:01\n\u001b[?25hCollecting prometheus-client (from notebook->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3f/0e/554a265ffdc56e1494ef08e18f765b0cdec78797f510c58c45cf37abb4f4/prometheus_client-0.8.0-py2.py3-none-any.whl (53kB)\n\u001b[K    100% |################################| 61kB 3.9MB/s eta 0:00:01\n\u001b[?25hCollecting terminado>=0.8.1 (from notebook->jupyter->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/ff/96/1d9a2c23990aea8f8e0b5c3b6627d03196a73771a17a2d9860bbe9823ab6/terminado-0.8.3-py2.py3-none-any.whl\nCollecting Send2Trash (from notebook->jupyter->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/49/46/c3dc27481d1cc57b9385aff41c474ceb7714f7935b1247194adae45db714/Send2Trash-1.5.0-py3-none-any.whl\nCollecting pyzmq>=17 (from notebook->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/c9/11/bb28199dd8f186a4053b7dd94a33abf0c1162d99203e7ab32a6b71fa045b/pyzmq-19.0.1-cp36-cp36m-manylinux1_x86_64.whl (1.1MB)\n\u001b[K    100% |################################| 1.1MB 4.9MB/s eta 0:00:01\n\u001b[?25hCollecting qtpy (from qtconsole->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/cd/fd/9972948f02e967b691cc0ca1f26124826a3b88cb38f412a8b7935b8c3c72/QtPy-1.9.0-py2.py3-none-any.whl (54kB)\n\u001b[K    100% |################################| 61kB 4.1MB/s eta 0:00:01\n\u001b[?25hCollecting prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 (from jupyter-console->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e4/a7/81b39aa50e9284fe2cb21cc7fb7de7817b224172d42793fd57451d38842b/prompt_toolkit-3.0.5-py3-none-any.whl (351kB)\n\u001b[K    100% |################################| 358kB 6.8MB/s eta 0:00:01    | 286kB 64.7MB/s eta 0:00:01\n\u001b[?25hCollecting webencodings (from bleach->nbconvert->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/f4/24/2a3e3df732393fed8b3ebf2ec078f05546de641fe1b667ee316ec1dcf3b7/webencodings-0.5.1-py2.py3-none-any.whl\nCollecting packaging (from bleach->nbconvert->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/46/19/c5ab91b1b05cfe63cccd5cfc971db9214c6dd6ced54e33c30d5af1d2bc43/packaging-20.4-py2.py3-none-any.whl\nCollecting pyrsistent>=0.14.0 (from jsonschema!=2.5.0,>=2.4->nbformat->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9f/0d/cbca4d0bbc5671822a59f270e4ce3f2195f8a899c97d0d5abb81b191efb5/pyrsistent-0.16.0.tar.gz (108kB)\n\u001b[K    100% |################################| 112kB 6.8MB/s eta 0:00:01\n\u001b[?25hCollecting attrs>=17.4.0 (from jsonschema!=2.5.0,>=2.4->nbformat->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/a2/db/4313ab3be961f7a763066401fb77f7748373b6094076ae2bda2806988af6/attrs-19.3.0-py2.py3-none-any.whl\nCollecting pyasn1<0.5.0,>=0.4.6 (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/62/1e/a94a8d635fa3ce4cfc7f506003548d0a2447ae76fd5ca53932970fe3053f/pyasn1-0.4.8-py2.py3-none-any.whl (77kB)\n\u001b[K    100% |################################| 81kB 5.2MB/s eta 0:00:01\n\u001b[?25hCollecting oauthlib>=3.0.0 (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/05/57/ce2e7a8fa7c0afb54a0581b14a65b56e62b5759dbc98e80627142b8a3704/oauthlib-3.1.0-py2.py3-none-any.whl (147kB)\n\u001b[K    100% |################################| 153kB 5.3MB/s eta 0:00:01\n\u001b[?25hCollecting zipp>=0.5 (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard<2.3.0,>=2.2.0->tensorflow->elephas)\n  Downloading https://files.pythonhosted.org/packages/b2/34/bfcb43cc0ba81f527bc4f40ef41ba2ff4080e047acb0586b56b3d017ace4/zipp-3.1.0-py3-none-any.whl\nCollecting pexpect; sys_platform != \"win32\" (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/39/7b/88dbb785881c28a102619d46423cb853b46dbccc70d3ac362d99773a78ce/pexpect-4.8.0-py2.py3-none-any.whl (59kB)\n\u001b[K    100% |################################| 61kB 4.7MB/s eta 0:00:01\n\u001b[?25hCollecting backcall (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets->jupyter->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/84/71/c8ca4f5bb1e08401b916c68003acf0a0655df935d74d93bf3f3364b310e0/backcall-0.1.0.tar.gz\nCollecting pickleshare (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets->jupyter->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/9a/41/220f49aaea88bc6fa6cba8d05ecf24676326156c23b991e80b3f2fc24c77/pickleshare-0.7.5-py2.py3-none-any.whl\nCollecting jedi>=0.10 (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f3/3f/67f027e18c60a800875df1a0894a2436ce9053637fa39725766e937c0a71/jedi-0.17.0-py2.py3-none-any.whl (1.1MB)\n\u001b[K    100% |################################| 1.1MB 6.0MB/s eta 0:00:01\n\u001b[?25hCollecting python-dateutil>=2.1 (from jupyter-client->ipykernel->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d4/70/d60450c3dd48ef87586924207ae8907090de0b306af2bce5d134d78615cb/python_dateutil-2.8.1-py2.py3-none-any.whl (227kB)\n\u001b[K    100% |################################| 235kB 7.6MB/s eta 0:00:01\n\u001b[?25hCollecting ptyprocess; os_name != \"nt\" (from terminado>=0.8.1->notebook->jupyter->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/d1/29/605c2cc68a9992d18dada28206eeada56ea4bd07a239669da41674648b6f/ptyprocess-0.6.0-py2.py3-none-any.whl\nCollecting wcwidth (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->jupyter-console->jupyter->hyperas->elephas)\n  Downloading https://files.pythonhosted.org/packages/1b/7b/de30a3962d8fbebbf8d748bfbf20c05c0a7c495df6716e82af109143ba00/wcwidth-0.2.3-py2.py3-none-any.whl\nCollecting pyparsing>=2.0.2 (from packaging->bleach->nbconvert->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/8a/bb/488841f56197b13700afd5658fc279a2025a39e22449b7cf29864669b15d/pyparsing-2.4.7-py2.py3-none-any.whl (67kB)\n\u001b[K    100% |################################| 71kB 4.9MB/s eta 0:00:01\n\u001b[?25hCollecting parso>=0.7.0 (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets->jupyter->hyperas->elephas)\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b5/61/998cce9e7476de000d031874df26a18f67cb73448164fc44a98f0c55920b/parso-0.7.0-py2.py3-none-any.whl (100kB)\n\u001b[K    100% |################################| 102kB 6.2MB/s ta 0:00:01\n\u001b[?25hBuilding wheels for collected packages: pyspark, wrapt, absl-py, termcolor, pyyaml, future, pandocfilters, tornado, pyrsistent, backcall\n  Building wheel for pyspark (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/bf/db/04/61d66a5939364e756eb1c1be4ec5bdce6e04047fc7929a3c3c\n  Building wheel for wrapt (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/b1/c2/ed/d62208260edbd3fa7156545c00ef966f45f2063d0a84f8208a\n  Building wheel for absl-py (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/8e/28/49/fad4e7f0b9a1227708cbbee4487ac8558a7334849cb81c813d\n  Building wheel for termcolor (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/7c/06/54/bc84598ba1daf8f970247f550b175aaaee85f68b4b0c5ab2c6\n  Building wheel for pyyaml (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/a7/c1/ea/cf5bd31012e735dc1dfea3131a2d5eae7978b251083d6247bd\n  Building wheel for future (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/8b/99/a0/81daf51dcd359a9377b110a8a886b3895921802d2fc1b2397e\n  Building wheel for pandocfilters (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/39/01/56/f1b08a6275acc59e846fa4c1e1b65dbc1919f20157d9e66c20\n  Building wheel for tornado (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/93/84/2f/409c7b2bb3afc3aa727f7ee8787975e0793f74d1165f4d0104\n  Building wheel for pyrsistent (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/c2/85/ad/bc6d41e2c4b35c9fdfed48f0fcd411ffc4164e67755ddf9ebb\n  Building wheel for backcall (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Stored in directory: /home/spark/shared/.cache/pip/wheels/98/b0/dd/29e28ff615af3dda4c67cab719dd51357597eabff926976b45\nSuccessfully built pyspark wrapt absl-py termcolor pyyaml future pandocfilters tornado pyrsistent backcall\n\u001b[31mpytest-astropy 0.8.0 requires pytest-cov>=2.0, which is not installed.\u001b[0m\n\u001b[31mpytest-astropy 0.8.0 requires pytest-filter-subpackage>=0.1, which is not installed.\u001b[0m\n\u001b[31mpytest-openfiles 0.5.0 has requirement pytest>=4.6, but you'll have pytest 3.10.1 which is incompatible.\u001b[0m\n\u001b[31mpytest-astropy 0.8.0 has requirement pytest>=4.6, but you'll have pytest 3.10.1 which is incompatible.\u001b[0m\n\u001b[31mibm-cos-sdk-core 2.4.3 has requirement urllib3<1.25,>=1.20, but you'll have urllib3 1.25.9 which is incompatible.\u001b[0m\n\u001b[31mbotocore 1.12.82 has requirement urllib3<1.25,>=1.20, but you'll have urllib3 1.25.9 which is incompatible.\u001b[0m\nInstalling collected packages: six, grpcio, gast, numpy, wrapt, pyasn1, pyasn1-modules, rsa, setuptools, cachetools, google-auth, Werkzeug, wheel, protobuf, oauthlib, urllib3, chardet, certifi, idna, requests, requests-oauthlib, google-auth-oauthlib, zipp, importlib-metadata, markdown, tensorboard-plugin-wit, absl-py, tensorboard, scipy, tensorflow-estimator, opt-einsum, termcolor, h5py, google-pasta, keras-preprocessing, astunparse, tensorflow, cython, keras-applications, pyyaml, keras, py4j, pyspark, tqdm, future, cloudpickle, decorator, networkx, hyperopt, webencodings, pyparsing, packaging, bleach, ipython-genutils, pyrsistent, attrs, jsonschema, traitlets, jupyter-core, nbformat, mistune, pandocfilters, MarkupSafe, Jinja2, pygments, defusedxml, testpath, entrypoints, nbconvert, ptyprocess, pexpect, backcall, pickleshare, parso, jedi, wcwidth, prompt-toolkit, ipython, python-dateutil, pyzmq, tornado, jupyter-client, ipykernel, prometheus-client, terminado, Send2Trash, notebook, widgetsnbextension, ipywidgets, qtpy, qtconsole, jupyter-console, jupyter, hyperas, click, itsdangerous, flask, elephas\nSuccessfully installed Jinja2-2.11.2 MarkupSafe-1.1.1 Send2Trash-1.5.0 Werkzeug-1.0.1 absl-py-0.9.0 astunparse-1.6.3 attrs-19.3.0 backcall-0.1.0 bleach-3.1.5 cachetools-4.1.0 certifi-2020.4.5.1 chardet-3.0.4 click-7.1.2 cloudpickle-1.4.1 cython-0.29.19 decorator-4.4.2 defusedxml-0.6.0 elephas-0.4.3 entrypoints-0.3 flask-1.1.2 future-0.18.2 gast-0.3.3 google-auth-1.16.1 google-auth-oauthlib-0.4.1 google-pasta-0.2.0 grpcio-1.29.0 h5py-2.10.0 hyperas-0.4.1 hyperopt-0.2.4 idna-2.9 importlib-metadata-1.6.0 ipykernel-5.3.0 ipython-7.15.0 ipython-genutils-0.2.0 ipywidgets-7.5.1 itsdangerous-1.1.0 jedi-0.17.0 jsonschema-3.2.0 jupyter-1.0.0 jupyter-client-6.1.3 jupyter-console-6.1.0 jupyter-core-4.6.3 keras-2.3.1 keras-applications-1.0.8 keras-preprocessing-1.1.2 markdown-3.2.2 mistune-0.8.4 nbconvert-5.6.1 nbformat-5.0.6 networkx-2.4 notebook-6.0.3 numpy-1.18.5 oauthlib-3.1.0 opt-einsum-3.2.1 packaging-20.4 pandocfilters-1.4.2 parso-0.7.0 pexpect-4.8.0 pickleshare-0.7.5 prometheus-client-0.8.0 prompt-toolkit-3.0.5 protobuf-3.12.2 ptyprocess-0.6.0 py4j-0.10.7 pyasn1-0.4.8 pyasn1-modules-0.2.8 pygments-2.6.1 pyparsing-2.4.7 pyrsistent-0.16.0 pyspark-2.4.5 python-dateutil-2.8.1 pyyaml-5.3.1 pyzmq-19.0.1 qtconsole-4.7.4 qtpy-1.9.0 requests-2.23.0 requests-oauthlib-1.3.0 rsa-4.0 scipy-1.4.1 setuptools-47.1.1 six-1.15.0 tensorboard-2.2.2 tensorboard-plugin-wit-1.6.0.post3 tensorflow-2.2.0 tensorflow-estimator-2.2.0 termcolor-1.1.0 terminado-0.8.3 testpath-0.4.4 tornado-6.0.4 tqdm-4.46.1 traitlets-4.3.3 urllib3-1.25.9 wcwidth-0.2.3 webencodings-0.5.1 wheel-0.34.2 widgetsnbextension-3.5.1 wrapt-1.12.1 zipp-3.1.0\nWARNING\n"
                }
            ],
            "source": "#create spark session\nfrom pyspark.sql import SparkSession\nspark = SparkSession.builder.getOrCreate()\n\n# Modules for analysis\nimport numpy as np\nimport pandas as pd\n\n#PySpark modules\nimport pyspark.sql.functions as F\nimport pyspark.sql.types as T\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.functions import isnan, when, count, col\n\n# Spark ML modules\nfrom pyspark.ml.feature import StringIndexer, VectorAssembler, Normalizer, PCA, Bucketizer\nfrom pyspark.ml.linalg import Vectors\nfrom pyspark.ml.pipeline import Pipeline\n\nfrom pyspark.ml.classification import RandomForestClassifier, GBTClassifier\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator,BinaryClassificationEvaluator\n\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.mllib.evaluation import BinaryClassificationMetrics\n\n\n#Visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n\n# Keras / Deep Learning\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout, Activation\nfrom keras import optimizers, regularizers\nfrom keras.optimizers import Adam\nfrom keras.utils import np_utils\n\n# Elephas for Deep Learning on Spark\n! pip install elephas\nfrom elephas.ml_model import ElephasEstimator\nfrom elephas.spark_model import SparkModel\nfrom elephas.utils.rdd_utils import to_simple_rdd\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='etl'></a>\n## 3. ETL"
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [],
            "source": "# Reading the csv file into spark dataframe.\ndf_ = spark.read.csv('OnlineNewsPopularity/OnlineNewsPopularity.csv', inferSchema = True, header = True, ignoreLeadingWhiteSpace=True)\n"
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_tokens_title</th>\n      <th>n_tokens_content</th>\n      <th>n_unique_tokens</th>\n      <th>n_non_stop_words</th>\n      <th>n_non_stop_unique_tokens</th>\n      <th>num_hrefs</th>\n      <th>num_self_hrefs</th>\n      <th>num_imgs</th>\n      <th>num_videos</th>\n      <th>average_token_length</th>\n      <th>...</th>\n      <th>min_positive_polarity</th>\n      <th>max_positive_polarity</th>\n      <th>avg_negative_polarity</th>\n      <th>min_negative_polarity</th>\n      <th>max_negative_polarity</th>\n      <th>title_subjectivity</th>\n      <th>title_sentiment_polarity</th>\n      <th>abs_title_subjectivity</th>\n      <th>abs_title_sentiment_polarity</th>\n      <th>shares</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12.0</td>\n      <td>219.0</td>\n      <td>0.663594</td>\n      <td>1.0</td>\n      <td>0.815385</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>4.680365</td>\n      <td>...</td>\n      <td>0.100000</td>\n      <td>0.7</td>\n      <td>-0.350000</td>\n      <td>-0.600</td>\n      <td>-0.200000</td>\n      <td>0.500000</td>\n      <td>-0.187500</td>\n      <td>0.000000</td>\n      <td>0.187500</td>\n      <td>593</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9.0</td>\n      <td>255.0</td>\n      <td>0.604743</td>\n      <td>1.0</td>\n      <td>0.791946</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>4.913725</td>\n      <td>...</td>\n      <td>0.033333</td>\n      <td>0.7</td>\n      <td>-0.118750</td>\n      <td>-0.125</td>\n      <td>-0.100000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>711</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9.0</td>\n      <td>211.0</td>\n      <td>0.575130</td>\n      <td>1.0</td>\n      <td>0.663866</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>4.393365</td>\n      <td>...</td>\n      <td>0.100000</td>\n      <td>1.0</td>\n      <td>-0.466667</td>\n      <td>-0.800</td>\n      <td>-0.133333</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>1500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9.0</td>\n      <td>531.0</td>\n      <td>0.503788</td>\n      <td>1.0</td>\n      <td>0.665635</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>4.404896</td>\n      <td>...</td>\n      <td>0.136364</td>\n      <td>0.8</td>\n      <td>-0.369697</td>\n      <td>-0.600</td>\n      <td>-0.166667</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>1200</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13.0</td>\n      <td>1072.0</td>\n      <td>0.415646</td>\n      <td>1.0</td>\n      <td>0.540890</td>\n      <td>19.0</td>\n      <td>19.0</td>\n      <td>20.0</td>\n      <td>0.0</td>\n      <td>4.682836</td>\n      <td>...</td>\n      <td>0.033333</td>\n      <td>1.0</td>\n      <td>-0.220192</td>\n      <td>-0.500</td>\n      <td>-0.050000</td>\n      <td>0.454545</td>\n      <td>0.136364</td>\n      <td>0.045455</td>\n      <td>0.136364</td>\n      <td>505</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows \u00d7 59 columns</p>\n</div>",
                        "text/plain": "   n_tokens_title  n_tokens_content  n_unique_tokens  n_non_stop_words  \\\n0            12.0             219.0         0.663594               1.0   \n1             9.0             255.0         0.604743               1.0   \n2             9.0             211.0         0.575130               1.0   \n3             9.0             531.0         0.503788               1.0   \n4            13.0            1072.0         0.415646               1.0   \n\n   n_non_stop_unique_tokens  num_hrefs  num_self_hrefs  num_imgs  num_videos  \\\n0                  0.815385        4.0             2.0       1.0         0.0   \n1                  0.791946        3.0             1.0       1.0         0.0   \n2                  0.663866        3.0             1.0       1.0         0.0   \n3                  0.665635        9.0             0.0       1.0         0.0   \n4                  0.540890       19.0            19.0      20.0         0.0   \n\n   average_token_length  ...  min_positive_polarity  max_positive_polarity  \\\n0              4.680365  ...               0.100000                    0.7   \n1              4.913725  ...               0.033333                    0.7   \n2              4.393365  ...               0.100000                    1.0   \n3              4.404896  ...               0.136364                    0.8   \n4              4.682836  ...               0.033333                    1.0   \n\n   avg_negative_polarity  min_negative_polarity  max_negative_polarity  \\\n0              -0.350000                 -0.600              -0.200000   \n1              -0.118750                 -0.125              -0.100000   \n2              -0.466667                 -0.800              -0.133333   \n3              -0.369697                 -0.600              -0.166667   \n4              -0.220192                 -0.500              -0.050000   \n\n   title_subjectivity  title_sentiment_polarity  abs_title_subjectivity  \\\n0            0.500000                 -0.187500                0.000000   \n1            0.000000                  0.000000                0.500000   \n2            0.000000                  0.000000                0.500000   \n3            0.000000                  0.000000                0.500000   \n4            0.454545                  0.136364                0.045455   \n\n   abs_title_sentiment_polarity  shares  \n0                      0.187500     593  \n1                      0.000000     711  \n2                      0.000000    1500  \n3                      0.000000    1200  \n4                      0.136364     505  \n\n[5 rows x 59 columns]"
                    },
                    "execution_count": 4,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# Dropping the columns which cannot be a feature\ndf = df_.drop('url').drop('timedelta')\ndf.limit(5).toPandas()"
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Total entries in the dataframe =  39644\n"
                }
            ],
            "source": "# Checking total number of entries\n\nprint('Total entries in the dataframe = ', df.count())"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "In Parquet file format data is organised by column which allows for better compression and efficient querying."
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [],
            "source": "# Write the data set into parquet file which is fast and effificent\ndf.write.parquet('OnlineNewsPopularity.parquet')"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='prepare'></a>\n## 4. Data Wrangling and EDA"
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "root\n |-- n_tokens_title: double (nullable = true)\n |-- n_tokens_content: double (nullable = true)\n |-- n_unique_tokens: double (nullable = true)\n |-- n_non_stop_words: double (nullable = true)\n |-- n_non_stop_unique_tokens: double (nullable = true)\n |-- num_hrefs: double (nullable = true)\n |-- num_self_hrefs: double (nullable = true)\n |-- num_imgs: double (nullable = true)\n |-- num_videos: double (nullable = true)\n |-- average_token_length: double (nullable = true)\n |-- num_keywords: double (nullable = true)\n |-- data_channel_is_lifestyle: double (nullable = true)\n |-- data_channel_is_entertainment: double (nullable = true)\n |-- data_channel_is_bus: double (nullable = true)\n |-- data_channel_is_socmed: double (nullable = true)\n |-- data_channel_is_tech: double (nullable = true)\n |-- data_channel_is_world: double (nullable = true)\n |-- kw_min_min: double (nullable = true)\n |-- kw_max_min: double (nullable = true)\n |-- kw_avg_min: double (nullable = true)\n |-- kw_min_max: double (nullable = true)\n |-- kw_max_max: double (nullable = true)\n |-- kw_avg_max: double (nullable = true)\n |-- kw_min_avg: double (nullable = true)\n |-- kw_max_avg: double (nullable = true)\n |-- kw_avg_avg: double (nullable = true)\n |-- self_reference_min_shares: double (nullable = true)\n |-- self_reference_max_shares: double (nullable = true)\n |-- self_reference_avg_sharess: double (nullable = true)\n |-- weekday_is_monday: double (nullable = true)\n |-- weekday_is_tuesday: double (nullable = true)\n |-- weekday_is_wednesday: double (nullable = true)\n |-- weekday_is_thursday: double (nullable = true)\n |-- weekday_is_friday: double (nullable = true)\n |-- weekday_is_saturday: double (nullable = true)\n |-- weekday_is_sunday: double (nullable = true)\n |-- is_weekend: double (nullable = true)\n |-- LDA_00: double (nullable = true)\n |-- LDA_01: double (nullable = true)\n |-- LDA_02: double (nullable = true)\n |-- LDA_03: double (nullable = true)\n |-- LDA_04: double (nullable = true)\n |-- global_subjectivity: double (nullable = true)\n |-- global_sentiment_polarity: double (nullable = true)\n |-- global_rate_positive_words: double (nullable = true)\n |-- global_rate_negative_words: double (nullable = true)\n |-- rate_positive_words: double (nullable = true)\n |-- rate_negative_words: double (nullable = true)\n |-- avg_positive_polarity: double (nullable = true)\n |-- min_positive_polarity: double (nullable = true)\n |-- max_positive_polarity: double (nullable = true)\n |-- avg_negative_polarity: double (nullable = true)\n |-- min_negative_polarity: double (nullable = true)\n |-- max_negative_polarity: double (nullable = true)\n |-- title_subjectivity: double (nullable = true)\n |-- title_sentiment_polarity: double (nullable = true)\n |-- abs_title_subjectivity: double (nullable = true)\n |-- abs_title_sentiment_polarity: double (nullable = true)\n |-- shares: integer (nullable = true)\n\nNone\n"
                },
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>n_tokens_title</th>\n      <td>12.000000</td>\n      <td>9.000000</td>\n      <td>9.000000</td>\n      <td>9.000000</td>\n    </tr>\n    <tr>\n      <th>n_tokens_content</th>\n      <td>219.000000</td>\n      <td>255.000000</td>\n      <td>211.000000</td>\n      <td>531.000000</td>\n    </tr>\n    <tr>\n      <th>n_unique_tokens</th>\n      <td>0.663594</td>\n      <td>0.604743</td>\n      <td>0.575130</td>\n      <td>0.503788</td>\n    </tr>\n    <tr>\n      <th>n_non_stop_words</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>n_non_stop_unique_tokens</th>\n      <td>0.815385</td>\n      <td>0.791946</td>\n      <td>0.663866</td>\n      <td>0.665635</td>\n    </tr>\n    <tr>\n      <th>num_hrefs</th>\n      <td>4.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>9.000000</td>\n    </tr>\n    <tr>\n      <th>num_self_hrefs</th>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>num_imgs</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>num_videos</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>average_token_length</th>\n      <td>4.680365</td>\n      <td>4.913725</td>\n      <td>4.393365</td>\n      <td>4.404896</td>\n    </tr>\n    <tr>\n      <th>num_keywords</th>\n      <td>5.000000</td>\n      <td>4.000000</td>\n      <td>6.000000</td>\n      <td>7.000000</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_lifestyle</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_entertainment</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_bus</th>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_socmed</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_tech</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_world</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_min_min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_max_min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_avg_min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_min_max</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_max_max</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_avg_max</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_min_avg</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_max_avg</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>kw_avg_avg</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>self_reference_min_shares</th>\n      <td>496.000000</td>\n      <td>0.000000</td>\n      <td>918.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>self_reference_max_shares</th>\n      <td>496.000000</td>\n      <td>0.000000</td>\n      <td>918.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>self_reference_avg_sharess</th>\n      <td>496.000000</td>\n      <td>0.000000</td>\n      <td>918.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>weekday_is_monday</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>weekday_is_tuesday</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>weekday_is_wednesday</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>weekday_is_thursday</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>weekday_is_friday</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>weekday_is_saturday</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>weekday_is_sunday</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>is_weekend</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>LDA_00</th>\n      <td>0.500331</td>\n      <td>0.799756</td>\n      <td>0.217792</td>\n      <td>0.028573</td>\n    </tr>\n    <tr>\n      <th>LDA_01</th>\n      <td>0.378279</td>\n      <td>0.050047</td>\n      <td>0.033334</td>\n      <td>0.419300</td>\n    </tr>\n    <tr>\n      <th>LDA_02</th>\n      <td>0.040005</td>\n      <td>0.050096</td>\n      <td>0.033351</td>\n      <td>0.494651</td>\n    </tr>\n    <tr>\n      <th>LDA_03</th>\n      <td>0.041263</td>\n      <td>0.050101</td>\n      <td>0.033334</td>\n      <td>0.028905</td>\n    </tr>\n    <tr>\n      <th>LDA_04</th>\n      <td>0.040123</td>\n      <td>0.050001</td>\n      <td>0.682188</td>\n      <td>0.028572</td>\n    </tr>\n    <tr>\n      <th>global_subjectivity</th>\n      <td>0.521617</td>\n      <td>0.341246</td>\n      <td>0.702222</td>\n      <td>0.429850</td>\n    </tr>\n    <tr>\n      <th>global_sentiment_polarity</th>\n      <td>0.092562</td>\n      <td>0.148948</td>\n      <td>0.323333</td>\n      <td>0.100705</td>\n    </tr>\n    <tr>\n      <th>global_rate_positive_words</th>\n      <td>0.045662</td>\n      <td>0.043137</td>\n      <td>0.056872</td>\n      <td>0.041431</td>\n    </tr>\n    <tr>\n      <th>global_rate_negative_words</th>\n      <td>0.013699</td>\n      <td>0.015686</td>\n      <td>0.009479</td>\n      <td>0.020716</td>\n    </tr>\n    <tr>\n      <th>rate_positive_words</th>\n      <td>0.769231</td>\n      <td>0.733333</td>\n      <td>0.857143</td>\n      <td>0.666667</td>\n    </tr>\n    <tr>\n      <th>rate_negative_words</th>\n      <td>0.230769</td>\n      <td>0.266667</td>\n      <td>0.142857</td>\n      <td>0.333333</td>\n    </tr>\n    <tr>\n      <th>avg_positive_polarity</th>\n      <td>0.378636</td>\n      <td>0.286915</td>\n      <td>0.495833</td>\n      <td>0.385965</td>\n    </tr>\n    <tr>\n      <th>min_positive_polarity</th>\n      <td>0.100000</td>\n      <td>0.033333</td>\n      <td>0.100000</td>\n      <td>0.136364</td>\n    </tr>\n    <tr>\n      <th>max_positive_polarity</th>\n      <td>0.700000</td>\n      <td>0.700000</td>\n      <td>1.000000</td>\n      <td>0.800000</td>\n    </tr>\n    <tr>\n      <th>avg_negative_polarity</th>\n      <td>-0.350000</td>\n      <td>-0.118750</td>\n      <td>-0.466667</td>\n      <td>-0.369697</td>\n    </tr>\n    <tr>\n      <th>min_negative_polarity</th>\n      <td>-0.600000</td>\n      <td>-0.125000</td>\n      <td>-0.800000</td>\n      <td>-0.600000</td>\n    </tr>\n    <tr>\n      <th>max_negative_polarity</th>\n      <td>-0.200000</td>\n      <td>-0.100000</td>\n      <td>-0.133333</td>\n      <td>-0.166667</td>\n    </tr>\n    <tr>\n      <th>title_subjectivity</th>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>title_sentiment_polarity</th>\n      <td>-0.187500</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>abs_title_subjectivity</th>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>abs_title_sentiment_polarity</th>\n      <td>0.187500</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>shares</th>\n      <td>593.000000</td>\n      <td>711.000000</td>\n      <td>1500.000000</td>\n      <td>1200.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                                        0           1            2  \\\nn_tokens_title                  12.000000    9.000000     9.000000   \nn_tokens_content               219.000000  255.000000   211.000000   \nn_unique_tokens                  0.663594    0.604743     0.575130   \nn_non_stop_words                 1.000000    1.000000     1.000000   \nn_non_stop_unique_tokens         0.815385    0.791946     0.663866   \nnum_hrefs                        4.000000    3.000000     3.000000   \nnum_self_hrefs                   2.000000    1.000000     1.000000   \nnum_imgs                         1.000000    1.000000     1.000000   \nnum_videos                       0.000000    0.000000     0.000000   \naverage_token_length             4.680365    4.913725     4.393365   \nnum_keywords                     5.000000    4.000000     6.000000   \ndata_channel_is_lifestyle        0.000000    0.000000     0.000000   \ndata_channel_is_entertainment    1.000000    0.000000     0.000000   \ndata_channel_is_bus              0.000000    1.000000     1.000000   \ndata_channel_is_socmed           0.000000    0.000000     0.000000   \ndata_channel_is_tech             0.000000    0.000000     0.000000   \ndata_channel_is_world            0.000000    0.000000     0.000000   \nkw_min_min                       0.000000    0.000000     0.000000   \nkw_max_min                       0.000000    0.000000     0.000000   \nkw_avg_min                       0.000000    0.000000     0.000000   \nkw_min_max                       0.000000    0.000000     0.000000   \nkw_max_max                       0.000000    0.000000     0.000000   \nkw_avg_max                       0.000000    0.000000     0.000000   \nkw_min_avg                       0.000000    0.000000     0.000000   \nkw_max_avg                       0.000000    0.000000     0.000000   \nkw_avg_avg                       0.000000    0.000000     0.000000   \nself_reference_min_shares      496.000000    0.000000   918.000000   \nself_reference_max_shares      496.000000    0.000000   918.000000   \nself_reference_avg_sharess     496.000000    0.000000   918.000000   \nweekday_is_monday                1.000000    1.000000     1.000000   \nweekday_is_tuesday               0.000000    0.000000     0.000000   \nweekday_is_wednesday             0.000000    0.000000     0.000000   \nweekday_is_thursday              0.000000    0.000000     0.000000   \nweekday_is_friday                0.000000    0.000000     0.000000   \nweekday_is_saturday              0.000000    0.000000     0.000000   \nweekday_is_sunday                0.000000    0.000000     0.000000   \nis_weekend                       0.000000    0.000000     0.000000   \nLDA_00                           0.500331    0.799756     0.217792   \nLDA_01                           0.378279    0.050047     0.033334   \nLDA_02                           0.040005    0.050096     0.033351   \nLDA_03                           0.041263    0.050101     0.033334   \nLDA_04                           0.040123    0.050001     0.682188   \nglobal_subjectivity              0.521617    0.341246     0.702222   \nglobal_sentiment_polarity        0.092562    0.148948     0.323333   \nglobal_rate_positive_words       0.045662    0.043137     0.056872   \nglobal_rate_negative_words       0.013699    0.015686     0.009479   \nrate_positive_words              0.769231    0.733333     0.857143   \nrate_negative_words              0.230769    0.266667     0.142857   \navg_positive_polarity            0.378636    0.286915     0.495833   \nmin_positive_polarity            0.100000    0.033333     0.100000   \nmax_positive_polarity            0.700000    0.700000     1.000000   \navg_negative_polarity           -0.350000   -0.118750    -0.466667   \nmin_negative_polarity           -0.600000   -0.125000    -0.800000   \nmax_negative_polarity           -0.200000   -0.100000    -0.133333   \ntitle_subjectivity               0.500000    0.000000     0.000000   \ntitle_sentiment_polarity        -0.187500    0.000000     0.000000   \nabs_title_subjectivity           0.000000    0.500000     0.500000   \nabs_title_sentiment_polarity     0.187500    0.000000     0.000000   \nshares                         593.000000  711.000000  1500.000000   \n\n                                         3  \nn_tokens_title                    9.000000  \nn_tokens_content                531.000000  \nn_unique_tokens                   0.503788  \nn_non_stop_words                  1.000000  \nn_non_stop_unique_tokens          0.665635  \nnum_hrefs                         9.000000  \nnum_self_hrefs                    0.000000  \nnum_imgs                          1.000000  \nnum_videos                        0.000000  \naverage_token_length              4.404896  \nnum_keywords                      7.000000  \ndata_channel_is_lifestyle         0.000000  \ndata_channel_is_entertainment     1.000000  \ndata_channel_is_bus               0.000000  \ndata_channel_is_socmed            0.000000  \ndata_channel_is_tech              0.000000  \ndata_channel_is_world             0.000000  \nkw_min_min                        0.000000  \nkw_max_min                        0.000000  \nkw_avg_min                        0.000000  \nkw_min_max                        0.000000  \nkw_max_max                        0.000000  \nkw_avg_max                        0.000000  \nkw_min_avg                        0.000000  \nkw_max_avg                        0.000000  \nkw_avg_avg                        0.000000  \nself_reference_min_shares         0.000000  \nself_reference_max_shares         0.000000  \nself_reference_avg_sharess        0.000000  \nweekday_is_monday                 1.000000  \nweekday_is_tuesday                0.000000  \nweekday_is_wednesday              0.000000  \nweekday_is_thursday               0.000000  \nweekday_is_friday                 0.000000  \nweekday_is_saturday               0.000000  \nweekday_is_sunday                 0.000000  \nis_weekend                        0.000000  \nLDA_00                            0.028573  \nLDA_01                            0.419300  \nLDA_02                            0.494651  \nLDA_03                            0.028905  \nLDA_04                            0.028572  \nglobal_subjectivity               0.429850  \nglobal_sentiment_polarity         0.100705  \nglobal_rate_positive_words        0.041431  \nglobal_rate_negative_words        0.020716  \nrate_positive_words               0.666667  \nrate_negative_words               0.333333  \navg_positive_polarity             0.385965  \nmin_positive_polarity             0.136364  \nmax_positive_polarity             0.800000  \navg_negative_polarity            -0.369697  \nmin_negative_polarity            -0.600000  \nmax_negative_polarity            -0.166667  \ntitle_subjectivity                0.000000  \ntitle_sentiment_polarity          0.000000  \nabs_title_subjectivity            0.500000  \nabs_title_sentiment_polarity      0.000000  \nshares                         1200.000000  "
                    },
                    "execution_count": 7,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "#reading the file \ndf = spark.read.parquet('OnlineNewsPopularity.parquet')\n\n# Checking the schema and crosschecking datatype of each column against column data and column description\nprint(df.printSchema())\ndf.limit(4).toPandas().T"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "All the column have data type fload and it matches with column description.So, no schema change required. "
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Attributes</th>\n      <th>Number of Null and NaN</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>n_tokens_title</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>n_tokens_content</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>n_unique_tokens</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>n_non_stop_words</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>n_non_stop_unique_tokens</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>num_hrefs</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>num_self_hrefs</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>num_imgs</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>num_videos</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>average_token_length</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>num_keywords</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>data_channel_is_lifestyle</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>data_channel_is_entertainment</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>data_channel_is_bus</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>data_channel_is_socmed</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>data_channel_is_tech</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>data_channel_is_world</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>kw_min_min</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>kw_max_min</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>kw_avg_min</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>kw_min_max</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>kw_max_max</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>kw_avg_max</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>kw_min_avg</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>kw_max_avg</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>kw_avg_avg</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>self_reference_min_shares</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>self_reference_max_shares</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>self_reference_avg_sharess</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>weekday_is_monday</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>weekday_is_tuesday</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>weekday_is_wednesday</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>weekday_is_thursday</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>weekday_is_friday</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>weekday_is_saturday</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>weekday_is_sunday</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>is_weekend</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>LDA_00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>LDA_01</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>LDA_02</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>LDA_03</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>LDA_04</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>global_subjectivity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>global_sentiment_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>global_rate_positive_words</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>global_rate_negative_words</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>rate_positive_words</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>rate_negative_words</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>avg_positive_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>min_positive_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>max_positive_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>avg_negative_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>min_negative_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>max_negative_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>title_subjectivity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>title_sentiment_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>abs_title_subjectivity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>abs_title_sentiment_polarity</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>shares</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                       Attributes  Number of Null and NaN\n0                  n_tokens_title                       0\n1                n_tokens_content                       0\n2                 n_unique_tokens                       0\n3                n_non_stop_words                       0\n4        n_non_stop_unique_tokens                       0\n5                       num_hrefs                       0\n6                  num_self_hrefs                       0\n7                        num_imgs                       0\n8                      num_videos                       0\n9            average_token_length                       0\n10                   num_keywords                       0\n11      data_channel_is_lifestyle                       0\n12  data_channel_is_entertainment                       0\n13            data_channel_is_bus                       0\n14         data_channel_is_socmed                       0\n15           data_channel_is_tech                       0\n16          data_channel_is_world                       0\n17                     kw_min_min                       0\n18                     kw_max_min                       0\n19                     kw_avg_min                       0\n20                     kw_min_max                       0\n21                     kw_max_max                       0\n22                     kw_avg_max                       0\n23                     kw_min_avg                       0\n24                     kw_max_avg                       0\n25                     kw_avg_avg                       0\n26      self_reference_min_shares                       0\n27      self_reference_max_shares                       0\n28     self_reference_avg_sharess                       0\n29              weekday_is_monday                       0\n30             weekday_is_tuesday                       0\n31           weekday_is_wednesday                       0\n32            weekday_is_thursday                       0\n33              weekday_is_friday                       0\n34            weekday_is_saturday                       0\n35              weekday_is_sunday                       0\n36                     is_weekend                       0\n37                         LDA_00                       0\n38                         LDA_01                       0\n39                         LDA_02                       0\n40                         LDA_03                       0\n41                         LDA_04                       0\n42            global_subjectivity                       0\n43      global_sentiment_polarity                       0\n44     global_rate_positive_words                       0\n45     global_rate_negative_words                       0\n46            rate_positive_words                       0\n47            rate_negative_words                       0\n48          avg_positive_polarity                       0\n49          min_positive_polarity                       0\n50          max_positive_polarity                       0\n51          avg_negative_polarity                       0\n52          min_negative_polarity                       0\n53          max_negative_polarity                       0\n54             title_subjectivity                       0\n55       title_sentiment_polarity                       0\n56         abs_title_subjectivity                       0\n57   abs_title_sentiment_polarity                       0\n58                         shares                       0"
                    },
                    "execution_count": 8,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# checking the null or nan values:\nmissing_count = df.select([count(when(isnan(n) | col(n).isNull(), n)).alias(n) for n in df.columns])\nmissing_count = missing_count.toPandas().T.reset_index()\nmissing_count.columns = ['Attributes', 'Number of Null and NaN']\nmissing_count"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "The data set don't contain any missing value"
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>summary</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>stddev</th>\n      <th>min</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>n_tokens_title</th>\n      <td>39644</td>\n      <td>10.398748864897588</td>\n      <td>2.1140368083035366</td>\n      <td>2.0</td>\n      <td>23.0</td>\n    </tr>\n    <tr>\n      <th>n_tokens_content</th>\n      <td>39644</td>\n      <td>546.514731106851</td>\n      <td>471.10750794805705</td>\n      <td>0.0</td>\n      <td>8474.0</td>\n    </tr>\n    <tr>\n      <th>n_unique_tokens</th>\n      <td>39644</td>\n      <td>0.5482157168486153</td>\n      <td>3.5207083312411007</td>\n      <td>0.0</td>\n      <td>701.0</td>\n    </tr>\n    <tr>\n      <th>n_non_stop_words</th>\n      <td>39644</td>\n      <td>0.996468565457855</td>\n      <td>5.231230945149107</td>\n      <td>0.0</td>\n      <td>1042.0</td>\n    </tr>\n    <tr>\n      <th>n_non_stop_unique_tokens</th>\n      <td>39644</td>\n      <td>0.6891753940079294</td>\n      <td>3.2648163548136124</td>\n      <td>0.0</td>\n      <td>650.0</td>\n    </tr>\n    <tr>\n      <th>num_hrefs</th>\n      <td>39644</td>\n      <td>10.883689839572192</td>\n      <td>11.332017376010894</td>\n      <td>0.0</td>\n      <td>304.0</td>\n    </tr>\n    <tr>\n      <th>num_self_hrefs</th>\n      <td>39644</td>\n      <td>3.2936383815962063</td>\n      <td>3.8551411453744477</td>\n      <td>0.0</td>\n      <td>116.0</td>\n    </tr>\n    <tr>\n      <th>num_imgs</th>\n      <td>39644</td>\n      <td>4.544142871556856</td>\n      <td>8.309433519603694</td>\n      <td>0.0</td>\n      <td>128.0</td>\n    </tr>\n    <tr>\n      <th>num_videos</th>\n      <td>39644</td>\n      <td>1.2498738775098375</td>\n      <td>4.10785508622367</td>\n      <td>0.0</td>\n      <td>91.0</td>\n    </tr>\n    <tr>\n      <th>average_token_length</th>\n      <td>39644</td>\n      <td>4.548239318341838</td>\n      <td>0.8444055651953499</td>\n      <td>0.0</td>\n      <td>8.04153354633</td>\n    </tr>\n    <tr>\n      <th>num_keywords</th>\n      <td>39644</td>\n      <td>7.223766522046211</td>\n      <td>1.9091303859707005</td>\n      <td>1.0</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_lifestyle</th>\n      <td>39644</td>\n      <td>0.05294622137019473</td>\n      <td>0.22392897060157427</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_entertainment</th>\n      <td>39644</td>\n      <td>0.17800928261527596</td>\n      <td>0.3825253833533383</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_bus</th>\n      <td>39644</td>\n      <td>0.15785490868731714</td>\n      <td>0.3646095032190893</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_socmed</th>\n      <td>39644</td>\n      <td>0.0585965089294723</td>\n      <td>0.2348709210689517</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_tech</th>\n      <td>39644</td>\n      <td>0.1852991625466653</td>\n      <td>0.3885449664810777</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>data_channel_is_world</th>\n      <td>39644</td>\n      <td>0.21256684491978609</td>\n      <td>0.40912883496356245</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>kw_min_min</th>\n      <td>39644</td>\n      <td>26.10680052466956</td>\n      <td>69.63321512144343</td>\n      <td>-1.0</td>\n      <td>377.0</td>\n    </tr>\n    <tr>\n      <th>kw_max_min</th>\n      <td>39644</td>\n      <td>1153.9516822217734</td>\n      <td>3857.990876530018</td>\n      <td>0.0</td>\n      <td>298400.0</td>\n    </tr>\n    <tr>\n      <th>kw_avg_min</th>\n      <td>39644</td>\n      <td>312.3669667971542</td>\n      <td>620.7838873138206</td>\n      <td>-1.0</td>\n      <td>42827.8571429</td>\n    </tr>\n    <tr>\n      <th>kw_min_max</th>\n      <td>39644</td>\n      <td>13612.35410150338</td>\n      <td>57986.02935737183</td>\n      <td>0.0</td>\n      <td>843300.0</td>\n    </tr>\n    <tr>\n      <th>kw_max_max</th>\n      <td>39644</td>\n      <td>752324.0666935728</td>\n      <td>214502.129572766</td>\n      <td>0.0</td>\n      <td>843300.0</td>\n    </tr>\n    <tr>\n      <th>kw_avg_max</th>\n      <td>39644</td>\n      <td>259281.93808264652</td>\n      <td>135102.24728477543</td>\n      <td>0.0</td>\n      <td>843300.0</td>\n    </tr>\n    <tr>\n      <th>kw_min_avg</th>\n      <td>39644</td>\n      <td>1117.1466099698387</td>\n      <td>1137.456950773098</td>\n      <td>-1.0</td>\n      <td>3613.0398195</td>\n    </tr>\n    <tr>\n      <th>kw_max_avg</th>\n      <td>39644</td>\n      <td>5657.211151064989</td>\n      <td>6098.871956751131</td>\n      <td>0.0</td>\n      <td>298400.0</td>\n    </tr>\n    <tr>\n      <th>kw_avg_avg</th>\n      <td>39644</td>\n      <td>3135.8586389465354</td>\n      <td>1318.1503970937194</td>\n      <td>0.0</td>\n      <td>43567.6599458</td>\n    </tr>\n    <tr>\n      <th>self_reference_min_shares</th>\n      <td>39644</td>\n      <td>3998.75539552013</td>\n      <td>19738.670516259917</td>\n      <td>0.0</td>\n      <td>843300.0</td>\n    </tr>\n    <tr>\n      <th>self_reference_max_shares</th>\n      <td>39644</td>\n      <td>10329.212661941277</td>\n      <td>41027.5766129217</td>\n      <td>0.0</td>\n      <td>843300.0</td>\n    </tr>\n    <tr>\n      <th>self_reference_avg_sharess</th>\n      <td>39644</td>\n      <td>6401.697579821466</td>\n      <td>24211.332231314438</td>\n      <td>0.0</td>\n      <td>843300.0</td>\n    </tr>\n    <tr>\n      <th>weekday_is_monday</th>\n      <td>39644</td>\n      <td>0.16802038139441025</td>\n      <td>0.37388909992166025</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>weekday_is_tuesday</th>\n      <td>39644</td>\n      <td>0.18640904046009485</td>\n      <td>0.3894413123393897</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>weekday_is_wednesday</th>\n      <td>39644</td>\n      <td>0.18754414287155685</td>\n      <td>0.39035263664228226</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>weekday_is_thursday</th>\n      <td>39644</td>\n      <td>0.18330642720209867</td>\n      <td>0.3869224176521677</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>weekday_is_friday</th>\n      <td>39644</td>\n      <td>0.14380486328322067</td>\n      <td>0.35089618183245924</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>weekday_is_saturday</th>\n      <td>39644</td>\n      <td>0.06187569367369589</td>\n      <td>0.24093268033164955</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>weekday_is_sunday</th>\n      <td>39644</td>\n      <td>0.06903945111492281</td>\n      <td>0.25352441026430783</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>is_weekend</th>\n      <td>39644</td>\n      <td>0.1309151447886187</td>\n      <td>0.33731178407787804</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>LDA_00</th>\n      <td>39644</td>\n      <td>0.18459904828385137</td>\n      <td>0.26297470913349286</td>\n      <td>0.0</td>\n      <td>0.926994384393</td>\n    </tr>\n    <tr>\n      <th>LDA_01</th>\n      <td>39644</td>\n      <td>0.14125577312830304</td>\n      <td>0.21970732884666852</td>\n      <td>0.0</td>\n      <td>0.925946986138</td>\n    </tr>\n    <tr>\n      <th>LDA_02</th>\n      <td>39644</td>\n      <td>0.21632096677306636</td>\n      <td>0.2821452038903662</td>\n      <td>0.0</td>\n      <td>0.919999088666</td>\n    </tr>\n    <tr>\n      <th>LDA_03</th>\n      <td>39644</td>\n      <td>0.2237696165135668</td>\n      <td>0.2951907334780075</td>\n      <td>0.0</td>\n      <td>0.926533782685</td>\n    </tr>\n    <tr>\n      <th>LDA_04</th>\n      <td>39644</td>\n      <td>0.23402937080318137</td>\n      <td>0.2891834780814853</td>\n      <td>0.0</td>\n      <td>0.927190809258</td>\n    </tr>\n    <tr>\n      <th>global_subjectivity</th>\n      <td>39644</td>\n      <td>0.4433701995507385</td>\n      <td>0.11668464244606269</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>global_sentiment_polarity</th>\n      <td>39644</td>\n      <td>0.11930926928571728</td>\n      <td>0.09693066125190732</td>\n      <td>-0.39375</td>\n      <td>0.727840909091</td>\n    </tr>\n    <tr>\n      <th>global_rate_positive_words</th>\n      <td>39644</td>\n      <td>0.03962483300904126</td>\n      <td>0.01742865786264878</td>\n      <td>0.0</td>\n      <td>0.155487804878</td>\n    </tr>\n    <tr>\n      <th>global_rate_negative_words</th>\n      <td>39644</td>\n      <td>0.016612119534643064</td>\n      <td>0.010827792187851766</td>\n      <td>0.0</td>\n      <td>0.184931506849</td>\n    </tr>\n    <tr>\n      <th>rate_positive_words</th>\n      <td>39644</td>\n      <td>0.6821502211003173</td>\n      <td>0.19020632466080048</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>rate_negative_words</th>\n      <td>39644</td>\n      <td>0.2879335242331663</td>\n      <td>0.15615588798184107</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>avg_positive_polarity</th>\n      <td>39644</td>\n      <td>0.35382494340707205</td>\n      <td>0.10454218830822057</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>min_positive_polarity</th>\n      <td>39644</td>\n      <td>0.09544553807022918</td>\n      <td>0.07131493174570112</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>max_positive_polarity</th>\n      <td>39644</td>\n      <td>0.7567275436995231</td>\n      <td>0.24778571839482794</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>avg_negative_polarity</th>\n      <td>39644</td>\n      <td>-0.25952414109091787</td>\n      <td>0.12772572202940585</td>\n      <td>-1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>min_negative_polarity</th>\n      <td>39644</td>\n      <td>-0.5219437277484086</td>\n      <td>0.29028950220938576</td>\n      <td>-1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>max_negative_polarity</th>\n      <td>39644</td>\n      <td>-0.10750024015633679</td>\n      <td>0.09537298483253788</td>\n      <td>-1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>title_subjectivity</th>\n      <td>39644</td>\n      <td>0.28235318411356214</td>\n      <td>0.32424737528933334</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>title_sentiment_polarity</th>\n      <td>39644</td>\n      <td>0.07142543197593448</td>\n      <td>0.2654502291342054</td>\n      <td>-1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>abs_title_subjectivity</th>\n      <td>39644</td>\n      <td>0.34184275596034047</td>\n      <td>0.18879080475299576</td>\n      <td>0.0</td>\n      <td>0.5</td>\n    </tr>\n    <tr>\n      <th>abs_title_sentiment_polarity</th>\n      <td>39644</td>\n      <td>0.1560636628565384</td>\n      <td>0.2262941977260797</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>shares</th>\n      <td>39644</td>\n      <td>3395.3801836343455</td>\n      <td>11626.950748651721</td>\n      <td>1</td>\n      <td>843300</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "summary                        count                  mean  \\\nn_tokens_title                 39644    10.398748864897588   \nn_tokens_content               39644      546.514731106851   \nn_unique_tokens                39644    0.5482157168486153   \nn_non_stop_words               39644     0.996468565457855   \nn_non_stop_unique_tokens       39644    0.6891753940079294   \nnum_hrefs                      39644    10.883689839572192   \nnum_self_hrefs                 39644    3.2936383815962063   \nnum_imgs                       39644     4.544142871556856   \nnum_videos                     39644    1.2498738775098375   \naverage_token_length           39644     4.548239318341838   \nnum_keywords                   39644     7.223766522046211   \ndata_channel_is_lifestyle      39644   0.05294622137019473   \ndata_channel_is_entertainment  39644   0.17800928261527596   \ndata_channel_is_bus            39644   0.15785490868731714   \ndata_channel_is_socmed         39644    0.0585965089294723   \ndata_channel_is_tech           39644    0.1852991625466653   \ndata_channel_is_world          39644   0.21256684491978609   \nkw_min_min                     39644     26.10680052466956   \nkw_max_min                     39644    1153.9516822217734   \nkw_avg_min                     39644     312.3669667971542   \nkw_min_max                     39644     13612.35410150338   \nkw_max_max                     39644     752324.0666935728   \nkw_avg_max                     39644    259281.93808264652   \nkw_min_avg                     39644    1117.1466099698387   \nkw_max_avg                     39644     5657.211151064989   \nkw_avg_avg                     39644    3135.8586389465354   \nself_reference_min_shares      39644      3998.75539552013   \nself_reference_max_shares      39644    10329.212661941277   \nself_reference_avg_sharess     39644     6401.697579821466   \nweekday_is_monday              39644   0.16802038139441025   \nweekday_is_tuesday             39644   0.18640904046009485   \nweekday_is_wednesday           39644   0.18754414287155685   \nweekday_is_thursday            39644   0.18330642720209867   \nweekday_is_friday              39644   0.14380486328322067   \nweekday_is_saturday            39644   0.06187569367369589   \nweekday_is_sunday              39644   0.06903945111492281   \nis_weekend                     39644    0.1309151447886187   \nLDA_00                         39644   0.18459904828385137   \nLDA_01                         39644   0.14125577312830304   \nLDA_02                         39644   0.21632096677306636   \nLDA_03                         39644    0.2237696165135668   \nLDA_04                         39644   0.23402937080318137   \nglobal_subjectivity            39644    0.4433701995507385   \nglobal_sentiment_polarity      39644   0.11930926928571728   \nglobal_rate_positive_words     39644   0.03962483300904126   \nglobal_rate_negative_words     39644  0.016612119534643064   \nrate_positive_words            39644    0.6821502211003173   \nrate_negative_words            39644    0.2879335242331663   \navg_positive_polarity          39644   0.35382494340707205   \nmin_positive_polarity          39644   0.09544553807022918   \nmax_positive_polarity          39644    0.7567275436995231   \navg_negative_polarity          39644  -0.25952414109091787   \nmin_negative_polarity          39644   -0.5219437277484086   \nmax_negative_polarity          39644  -0.10750024015633679   \ntitle_subjectivity             39644   0.28235318411356214   \ntitle_sentiment_polarity       39644   0.07142543197593448   \nabs_title_subjectivity         39644   0.34184275596034047   \nabs_title_sentiment_polarity   39644    0.1560636628565384   \nshares                         39644    3395.3801836343455   \n\nsummary                                      stddev       min             max  \nn_tokens_title                   2.1140368083035366       2.0            23.0  \nn_tokens_content                 471.10750794805705       0.0          8474.0  \nn_unique_tokens                  3.5207083312411007       0.0           701.0  \nn_non_stop_words                  5.231230945149107       0.0          1042.0  \nn_non_stop_unique_tokens         3.2648163548136124       0.0           650.0  \nnum_hrefs                        11.332017376010894       0.0           304.0  \nnum_self_hrefs                   3.8551411453744477       0.0           116.0  \nnum_imgs                          8.309433519603694       0.0           128.0  \nnum_videos                         4.10785508622367       0.0            91.0  \naverage_token_length             0.8444055651953499       0.0   8.04153354633  \nnum_keywords                     1.9091303859707005       1.0            10.0  \ndata_channel_is_lifestyle       0.22392897060157427       0.0             1.0  \ndata_channel_is_entertainment    0.3825253833533383       0.0             1.0  \ndata_channel_is_bus              0.3646095032190893       0.0             1.0  \ndata_channel_is_socmed           0.2348709210689517       0.0             1.0  \ndata_channel_is_tech             0.3885449664810777       0.0             1.0  \ndata_channel_is_world           0.40912883496356245       0.0             1.0  \nkw_min_min                        69.63321512144343      -1.0           377.0  \nkw_max_min                        3857.990876530018       0.0        298400.0  \nkw_avg_min                        620.7838873138206      -1.0   42827.8571429  \nkw_min_max                        57986.02935737183       0.0        843300.0  \nkw_max_max                         214502.129572766       0.0        843300.0  \nkw_avg_max                       135102.24728477543       0.0        843300.0  \nkw_min_avg                        1137.456950773098      -1.0    3613.0398195  \nkw_max_avg                        6098.871956751131       0.0        298400.0  \nkw_avg_avg                       1318.1503970937194       0.0   43567.6599458  \nself_reference_min_shares        19738.670516259917       0.0        843300.0  \nself_reference_max_shares          41027.5766129217       0.0        843300.0  \nself_reference_avg_sharess       24211.332231314438       0.0        843300.0  \nweekday_is_monday               0.37388909992166025       0.0             1.0  \nweekday_is_tuesday               0.3894413123393897       0.0             1.0  \nweekday_is_wednesday            0.39035263664228226       0.0             1.0  \nweekday_is_thursday              0.3869224176521677       0.0             1.0  \nweekday_is_friday               0.35089618183245924       0.0             1.0  \nweekday_is_saturday             0.24093268033164955       0.0             1.0  \nweekday_is_sunday               0.25352441026430783       0.0             1.0  \nis_weekend                      0.33731178407787804       0.0             1.0  \nLDA_00                          0.26297470913349286       0.0  0.926994384393  \nLDA_01                          0.21970732884666852       0.0  0.925946986138  \nLDA_02                           0.2821452038903662       0.0  0.919999088666  \nLDA_03                           0.2951907334780075       0.0  0.926533782685  \nLDA_04                           0.2891834780814853       0.0  0.927190809258  \nglobal_subjectivity             0.11668464244606269       0.0             1.0  \nglobal_sentiment_polarity       0.09693066125190732  -0.39375  0.727840909091  \nglobal_rate_positive_words      0.01742865786264878       0.0  0.155487804878  \nglobal_rate_negative_words     0.010827792187851766       0.0  0.184931506849  \nrate_positive_words             0.19020632466080048       0.0             1.0  \nrate_negative_words             0.15615588798184107       0.0             1.0  \navg_positive_polarity           0.10454218830822057       0.0             1.0  \nmin_positive_polarity           0.07131493174570112       0.0             1.0  \nmax_positive_polarity           0.24778571839482794       0.0             1.0  \navg_negative_polarity           0.12772572202940585      -1.0             0.0  \nmin_negative_polarity           0.29028950220938576      -1.0             0.0  \nmax_negative_polarity           0.09537298483253788      -1.0             0.0  \ntitle_subjectivity              0.32424737528933334       0.0             1.0  \ntitle_sentiment_polarity         0.2654502291342054      -1.0             1.0  \nabs_title_subjectivity          0.18879080475299576       0.0             0.5  \nabs_title_sentiment_polarity     0.2262941977260797       0.0             1.0  \nshares                           11626.950748651721         1          843300  "
                    },
                    "execution_count": 9,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# Discriptive statistics for each column\ndesc_stat = df.describe().toPandas()\ndesc_stat.set_index('summary').T"
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "+-------+------------------+\n|summary|            shares|\n+-------+------------------+\n|  count|             39644|\n|   mean|3395.3801836343455|\n| stddev|11626.950748651721|\n|    min|                 1|\n|    max|            843300|\n+-------+------------------+\n\n"
                }
            ],
            "source": "# Discriptive statistics for shares column\ndf.select('shares').describe().show()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "In column 'shares' minimum value is 1 and maximum value is 843300. Let's check its distribution in more detail."
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 576x504 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 864x576 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "#Taking ransom sample points from the share column\nx = [n[0] for n in df.select('shares').sample(False, 0.2).collect()]\n\n#plotting boxplot to see the distribution of number of shares\nfig = plt.figure(figsize = (8,7))\nax = plt.gca()\nax.boxplot(x, vert=True, widths = 0.3) #labels = ['shares']\nax.set_ylabel('Shares', fontsize = 20)\nax.set_title('Box Plot: Distribution of number of shares', fontsize = 20)\nplt.show()\n\n\n# plotting histogram to see the frquency distribution of number of shares\ncount, bin_edges = np.histogram(x)\nplt.figure(figsize = (12,8))\nax = sns.distplot(x, hist=True, kde=True, \n             bins=int(180/5), color = '#2038d6',\n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\n\nax.set_title('Histogram: Distribution of number of shares', fontsize = 15)\nax.set_xlabel('No. of shares', fontsize = 15)\nax.set_ylabel('Frequency', fontsize = 15)\nax.set_xticks(bin_edges)\nplt.show()\n\n\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Let's Calculate median of the shares column"
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 1368x576 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                },
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Median value for share column is  1400.0\n"
                }
            ],
            "source": "# Defining a function in pandas to calculate median \ndef calculate_median(values_list):\n    try:\n        median = np.median(values_list) \n        return round(float(median),2)\n    \n    except Exception:\n        return None \n    \n# Turning this python function into a pyspark UDF\nmedian_calculator = F.udf(calculate_median, returnType = T.FloatType())\n\n#Calculating the median\nlist_shares= F.collect_list(\"shares\")\nmedian = df.select(median_calculator(list_shares).alias('Median')).collect()[0][0]\n\n\n# plotting histogram to check median value of shares\nx = sorted(x)[:7000]\ncount, bin_edges = np.histogram(x)\nplt.figure(figsize = (19,8))\nax = sns.distplot(x, hist=True, kde=True, \n             bins=int(180/5), color = '#2038d6',\n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\n\nax.set_title('Closure look to distribution of number of shares and its median value', fontsize = 15)\nax.set_xlabel('No. of shares', fontsize = 15)\nax.set_ylabel('Frequency', fontsize = 15)\nax.set_xticks(bin_edges)\nplt.plot(median, 0, '-rD')\nplt.annotate('Median', (1400,0), textcoords=\"offset points\", xytext=(0,-24), ha='center', color='red')\nplt.show()\n# plt.xlim()\nprint('Median value for share column is ', median)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Since the median value of the share is 1400, we take this as threshold for populrity calculation. In other words, number of shares more than 1400 will be considered Popular and less than 1400 will be considered Unpopular.<br><br>\nWe will create a new column in the data set named Popularity with **Popularity** and **Unpopularity** as classes."
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_tokens_title</th>\n      <th>n_tokens_content</th>\n      <th>n_unique_tokens</th>\n      <th>n_non_stop_words</th>\n      <th>n_non_stop_unique_tokens</th>\n      <th>num_hrefs</th>\n      <th>num_self_hrefs</th>\n      <th>num_imgs</th>\n      <th>num_videos</th>\n      <th>average_token_length</th>\n      <th>...</th>\n      <th>max_positive_polarity</th>\n      <th>avg_negative_polarity</th>\n      <th>min_negative_polarity</th>\n      <th>max_negative_polarity</th>\n      <th>title_subjectivity</th>\n      <th>title_sentiment_polarity</th>\n      <th>abs_title_subjectivity</th>\n      <th>abs_title_sentiment_polarity</th>\n      <th>shares</th>\n      <th>popularity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12.0</td>\n      <td>219.0</td>\n      <td>0.663594</td>\n      <td>1.0</td>\n      <td>0.815385</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>4.680365</td>\n      <td>...</td>\n      <td>0.7</td>\n      <td>-0.350000</td>\n      <td>-0.600</td>\n      <td>-0.200000</td>\n      <td>0.500000</td>\n      <td>-0.187500</td>\n      <td>0.000000</td>\n      <td>0.187500</td>\n      <td>593</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9.0</td>\n      <td>255.0</td>\n      <td>0.604743</td>\n      <td>1.0</td>\n      <td>0.791946</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>4.913725</td>\n      <td>...</td>\n      <td>0.7</td>\n      <td>-0.118750</td>\n      <td>-0.125</td>\n      <td>-0.100000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>711</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9.0</td>\n      <td>211.0</td>\n      <td>0.575130</td>\n      <td>1.0</td>\n      <td>0.663866</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>4.393365</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>-0.466667</td>\n      <td>-0.800</td>\n      <td>-0.133333</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>1500</td>\n      <td>Popular</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9.0</td>\n      <td>531.0</td>\n      <td>0.503788</td>\n      <td>1.0</td>\n      <td>0.665635</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>4.404896</td>\n      <td>...</td>\n      <td>0.8</td>\n      <td>-0.369697</td>\n      <td>-0.600</td>\n      <td>-0.166667</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>1200</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>13.0</td>\n      <td>1072.0</td>\n      <td>0.415646</td>\n      <td>1.0</td>\n      <td>0.540890</td>\n      <td>19.0</td>\n      <td>19.0</td>\n      <td>20.0</td>\n      <td>0.0</td>\n      <td>4.682836</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>-0.220192</td>\n      <td>-0.500</td>\n      <td>-0.050000</td>\n      <td>0.454545</td>\n      <td>0.136364</td>\n      <td>0.045455</td>\n      <td>0.136364</td>\n      <td>505</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10.0</td>\n      <td>370.0</td>\n      <td>0.559889</td>\n      <td>1.0</td>\n      <td>0.698198</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.359459</td>\n      <td>...</td>\n      <td>0.6</td>\n      <td>-0.195000</td>\n      <td>-0.400</td>\n      <td>-0.100000</td>\n      <td>0.642857</td>\n      <td>0.214286</td>\n      <td>0.142857</td>\n      <td>0.214286</td>\n      <td>855</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8.0</td>\n      <td>960.0</td>\n      <td>0.418163</td>\n      <td>1.0</td>\n      <td>0.549834</td>\n      <td>21.0</td>\n      <td>20.0</td>\n      <td>20.0</td>\n      <td>0.0</td>\n      <td>4.654167</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>-0.224479</td>\n      <td>-0.500</td>\n      <td>-0.050000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>556</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>12.0</td>\n      <td>989.0</td>\n      <td>0.433574</td>\n      <td>1.0</td>\n      <td>0.572108</td>\n      <td>20.0</td>\n      <td>20.0</td>\n      <td>20.0</td>\n      <td>0.0</td>\n      <td>4.617796</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>-0.242778</td>\n      <td>-0.500</td>\n      <td>-0.050000</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>0.500000</td>\n      <td>891</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>11.0</td>\n      <td>97.0</td>\n      <td>0.670103</td>\n      <td>1.0</td>\n      <td>0.836735</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.855670</td>\n      <td>...</td>\n      <td>0.8</td>\n      <td>-0.125000</td>\n      <td>-0.125</td>\n      <td>-0.125000</td>\n      <td>0.125000</td>\n      <td>0.000000</td>\n      <td>0.375000</td>\n      <td>0.000000</td>\n      <td>3600</td>\n      <td>Popular</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10.0</td>\n      <td>231.0</td>\n      <td>0.636364</td>\n      <td>1.0</td>\n      <td>0.797101</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>5.090909</td>\n      <td>...</td>\n      <td>0.5</td>\n      <td>-0.238095</td>\n      <td>-0.500</td>\n      <td>-0.100000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.500000</td>\n      <td>0.000000</td>\n      <td>710</td>\n      <td>Unpopular</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows \u00d7 60 columns</p>\n</div>",
                        "text/plain": "   n_tokens_title  n_tokens_content  n_unique_tokens  n_non_stop_words  \\\n0            12.0             219.0         0.663594               1.0   \n1             9.0             255.0         0.604743               1.0   \n2             9.0             211.0         0.575130               1.0   \n3             9.0             531.0         0.503788               1.0   \n4            13.0            1072.0         0.415646               1.0   \n5            10.0             370.0         0.559889               1.0   \n6             8.0             960.0         0.418163               1.0   \n7            12.0             989.0         0.433574               1.0   \n8            11.0              97.0         0.670103               1.0   \n9            10.0             231.0         0.636364               1.0   \n\n   n_non_stop_unique_tokens  num_hrefs  num_self_hrefs  num_imgs  num_videos  \\\n0                  0.815385        4.0             2.0       1.0         0.0   \n1                  0.791946        3.0             1.0       1.0         0.0   \n2                  0.663866        3.0             1.0       1.0         0.0   \n3                  0.665635        9.0             0.0       1.0         0.0   \n4                  0.540890       19.0            19.0      20.0         0.0   \n5                  0.698198        2.0             2.0       0.0         0.0   \n6                  0.549834       21.0            20.0      20.0         0.0   \n7                  0.572108       20.0            20.0      20.0         0.0   \n8                  0.836735        2.0             0.0       0.0         0.0   \n9                  0.797101        4.0             1.0       1.0         1.0   \n\n   average_token_length  ...  max_positive_polarity  avg_negative_polarity  \\\n0              4.680365  ...                    0.7              -0.350000   \n1              4.913725  ...                    0.7              -0.118750   \n2              4.393365  ...                    1.0              -0.466667   \n3              4.404896  ...                    0.8              -0.369697   \n4              4.682836  ...                    1.0              -0.220192   \n5              4.359459  ...                    0.6              -0.195000   \n6              4.654167  ...                    1.0              -0.224479   \n7              4.617796  ...                    1.0              -0.242778   \n8              4.855670  ...                    0.8              -0.125000   \n9              5.090909  ...                    0.5              -0.238095   \n\n   min_negative_polarity  max_negative_polarity  title_subjectivity  \\\n0                 -0.600              -0.200000            0.500000   \n1                 -0.125              -0.100000            0.000000   \n2                 -0.800              -0.133333            0.000000   \n3                 -0.600              -0.166667            0.000000   \n4                 -0.500              -0.050000            0.454545   \n5                 -0.400              -0.100000            0.642857   \n6                 -0.500              -0.050000            0.000000   \n7                 -0.500              -0.050000            1.000000   \n8                 -0.125              -0.125000            0.125000   \n9                 -0.500              -0.100000            0.000000   \n\n   title_sentiment_polarity  abs_title_subjectivity  \\\n0                 -0.187500                0.000000   \n1                  0.000000                0.500000   \n2                  0.000000                0.500000   \n3                  0.000000                0.500000   \n4                  0.136364                0.045455   \n5                  0.214286                0.142857   \n6                  0.000000                0.500000   \n7                  0.500000                0.500000   \n8                  0.000000                0.375000   \n9                  0.000000                0.500000   \n\n   abs_title_sentiment_polarity  shares  popularity  \n0                      0.187500     593   Unpopular  \n1                      0.000000     711   Unpopular  \n2                      0.000000    1500     Popular  \n3                      0.000000    1200   Unpopular  \n4                      0.136364     505   Unpopular  \n5                      0.214286     855   Unpopular  \n6                      0.000000     556   Unpopular  \n7                      0.500000     891   Unpopular  \n8                      0.000000    3600     Popular  \n9                      0.000000     710   Unpopular  \n\n[10 rows x 60 columns]"
                    },
                    "execution_count": 13,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# Creating a new column called popularity where share>1400 is labeled as popular and shares<1400 is labeled as unpopular\n\nbins = [0,1400,float('inf')]\ngroup_name = ['Popular', 'Unpopular']\ngroup_name = group_name[::-1]\n\nbucketizer = Bucketizer(splits=bins ,inputCol=\"shares\", outputCol=\"buckets\")\ndf_buck = bucketizer.setHandleInvalid(\"keep\").transform(df)\n\nbucket_num = [n[0] for n in df_buck.select('buckets').distinct().collect()]\nbucket_num = sorted(bucket_num)\n\nt = {}\nfor m,n in zip(bucket_num,group_name):\n    t.update({m:n})\n# print(t)\n\nudf_buck = udf(lambda x: t[x], F.StringType())\ndf_buck = df_buck.withColumn(\"popularity\", udf_buck(\"buckets\"))\n\n# dropping the ucket column\ndf_buck = df_buck.drop('buckets')\n\n# show the 'shares', 'popularity' columns of newly updated dataset\n# df_buck.select('shares', 'popularity').limit(10).toPandas()\ndf_buck.limit(10).toPandas()"
        },
        {
            "cell_type": "code",
            "execution_count": 14,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Total entries in the dataframe =  39644\n"
                }
            ],
            "source": "# Let's cros check total number of entries\n\nprint('Total entries in the dataframe = ', df_buck.count())"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Let's check whether the classes are balanced or not."
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "metadata": {
                "pixiedust": {
                    "displayParams": {
                        "chartsize": "64",
                        "clusterby": "Ranks",
                        "handlerId": "barChart",
                        "keyFields": "count",
                        "legend": "true",
                        "mpld3": "false",
                        "orientation": "vertical",
                        "rendererId": "matplotlib",
                        "rowCount": "3",
                        "sortby": "Values ASC",
                        "tableFields": "count,popularity",
                        "table_showrows": "All"
                    }
                }
            },
            "outputs": [
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 720x576 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "# Bar plot: Popular Vs Unpopular \npopularity_count= df_buck.select( 'popularity').groupBy('popularity').count().toPandas()\n\nplt.figure(figsize = [10,8])\nsns.barplot(x = popularity_count['popularity'], y=popularity_count['count'], palette=['#9fa1ed', '#2038d6'], edgecolor='black')\nplt.title('Proportion of Popular and Unpopular articles in Mashable',  fontsize = 16)\nplt.show()\n\n# len(df_buck.columns)\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Unbalanced classes may sometimes lead to overfitting. But here both the classes i.e. Popular and Unpopular are balanced. "
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='feature'></a>\n## 5.Feature Engineering"
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Total number of features =  58\n"
                }
            ],
            "source": "# String Indexing the popularity column into label column\nstringIndexer = StringIndexer(inputCol='popularity', outputCol='label')\n\n# Removing shares and popularity columns and taking rest as features\nfeature_col = df_buck.columns[:-2]\nprint('Total number of features = ', len(feature_col))\n\n#Converting all features to a dense vector column called features\nvectorAssembler = VectorAssembler(inputCols = feature_col, outputCol = 'features')\n\n#Normalizing the new features column\nnormalizer = Normalizer(inputCol = 'features', outputCol = 'features_normalized')\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Since high number of feature may result in curse of dimensionality so we will PCA and check whether it helps is better accuracy or not. So, lets do principal component analysis of the features."
        },
        {
            "cell_type": "code",
            "execution_count": 17,
            "metadata": {},
            "outputs": [],
            "source": "#Using PCA\npca  = PCA(k=30, inputCol = 'features_normalized', outputCol = 'features_pca')"
        },
        {
            "cell_type": "code",
            "execution_count": 18,
            "metadata": {},
            "outputs": [],
            "source": "#Two featuring engineering pipelines: 1st without pca and 2nd with pca\nfeature_pipe = Pipeline(stages = [stringIndexer,vectorAssembler,normalizer ])\nfeature_pipe_pca = Pipeline(stages = [stringIndexer,vectorAssembler,normalizer, pca ])"
        },
        {
            "cell_type": "code",
            "execution_count": 19,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Number of rows in transformed data set 39644\nNumber of rows in transformed data set on with pca was applied 39644\n"
                }
            ],
            "source": "# Transforming the dataset\ndf_transformed =feature_pipe.fit(df_buck).transform(df_buck)\nprint(f'Number of rows in transformed data set {df_transformed.count()}')\n\ndf_transformed_pca =feature_pipe_pca.fit(df_buck).transform(df_buck)\nprint(f'Number of rows in transformed data set on with pca was applied {df_transformed_pca.count()}')"
        },
        {
            "cell_type": "code",
            "execution_count": 20,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>popularity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>Unpopular</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0</td>\n      <td>Popular</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.0</td>\n      <td>Unpopular</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "   label popularity\n0    1.0  Unpopular\n1    1.0  Unpopular\n2    0.0    Popular\n3    1.0  Unpopular"
                    },
                    "execution_count": 20,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "#Check what index was assigned to the labels\ndf_transformed.select('label','popularity').limit(4).toPandas()\n"
        },
        {
            "cell_type": "code",
            "execution_count": 21,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>features</th>\n      <th>features_normalized</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>(12.0, 219.0, 0.663594466988, 0.999999992308, ...</td>\n      <td>(0.013533403845852505, 0.24698462018680822, 0....</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>(9.0, 255.0, 0.604743080614, 0.999999993289, 0...</td>\n      <td>(0.03525661728084299, 0.9989374896238848, 0.00...</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "   label                                           features  \\\n0    1.0  (12.0, 219.0, 0.663594466988, 0.999999992308, ...   \n1    1.0  (9.0, 255.0, 0.604743080614, 0.999999993289, 0...   \n\n                                 features_normalized  \n0  (0.013533403845852505, 0.24698462018680822, 0....  \n1  (0.03525661728084299, 0.9989374896238848, 0.00...  "
                    },
                    "execution_count": 21,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "#Showing the transformed dataset in pandas (without pca)\ndf_transformed = df_transformed.select('label','features','features_normalized')\ndf_transformed.limit(2).toPandas()\n"
        },
        {
            "cell_type": "code",
            "execution_count": 22,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>features</th>\n      <th>features_normalized</th>\n      <th>features_pca</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>(12.0, 219.0, 0.663594466988, 0.999999992308, ...</td>\n      <td>(0.013533403845852505, 0.24698462018680822, 0....</td>\n      <td>[-0.09351349241933445, -0.7285010644496032, 0....</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>(9.0, 255.0, 0.604743080614, 0.999999993289, 0...</td>\n      <td>(0.03525661728084299, 0.9989374896238848, 0.00...</td>\n      <td>[-0.009092907254163986, -0.09665514764754315, ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "   label                                           features  \\\n0    1.0  (12.0, 219.0, 0.663594466988, 0.999999992308, ...   \n1    1.0  (9.0, 255.0, 0.604743080614, 0.999999993289, 0...   \n\n                                 features_normalized  \\\n0  (0.013533403845852505, 0.24698462018680822, 0....   \n1  (0.03525661728084299, 0.9989374896238848, 0.00...   \n\n                                        features_pca  \n0  [-0.09351349241933445, -0.7285010644496032, 0....  \n1  [-0.009092907254163986, -0.09665514764754315, ...  "
                    },
                    "execution_count": 22,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "#Showing the transformed dataset in pandas (with pca)\ndf_transformed_pca = df_transformed_pca.select('label','features','features_normalized','features_pca')\ndf_transformed_pca.limit(2).toPandas()\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='model'></a>\n## 6. Building Classification Models <br>\nI will be using two machine learning model and one deep-learning model. In machine learning I used Random Forest and Gradient Boosted Tree classifier with Spark ML. In deep-learning I used ANN with Keras API.\n<a id='ml'></a>\n#### (A). Machine Learning Models"
        },
        {
            "cell_type": "code",
            "execution_count": 23,
            "metadata": {},
            "outputs": [],
            "source": "# Initialization of classifiers \n\n#Building RandomForestClassifier \nrfc = RandomForestClassifier(featuresCol='features_normalized', labelCol='label', predictionCol='prediction', numTrees = 150)\nrfc_pca =  RandomForestClassifier(featuresCol='features_pca', labelCol='label', predictionCol='prediction', numTrees = 150)\n\n#Building Gradient Boosted Tree Classifier\ngbt = GBTClassifier(featuresCol='features_normalized', maxIter=40)\ngbt_pca= GBTClassifier(featuresCol='features_pca', maxIter=40)\n\n"
        },
        {
            "cell_type": "code",
            "execution_count": 24,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Size of training data without pca is 27801\nSize of testing data without pca is 11828\nSize of data to be used for prediction without pca is 15\n\nSize of training data with pca is 27795\nSize of testing data with pca is 11833\nSize of data to be used for prediction with pca is 16\n"
                }
            ],
            "source": "# Shuffle Data\ndf_transformed = df_transformed.orderBy(F.rand())\n\n# Train Test split (without pca): Data is split into Training data, Testing data and Data to be used for prediction\ndf_train, df_test, df_predict = df_transformed.randomSplit([0.7, 0.2997, 0.0003], seed= 101)\n\n# Train Test split (with pca): Data is split into Training data, Testing data and Data to be used for prediction\ndf_train_pca, df_test_pca, df_predict_pca = df_transformed_pca.randomSplit([0.7, 0.2997, 0.0003], seed =101)\n\n#Let's check the size of all the three (without pca)\nprint(f'Size of training data without pca is {df_train.count()}')\nprint(f'Size of testing data without pca is {df_test.count()}')\nprint(f'Size of data to be used for prediction (without pca) is {df_predict.count()}')\nprint('')\n\n#Let's check the size of all the three (with pca)\nprint(f'Size of training data with pca is {df_train_pca.count()}')\nprint(f'Size of testing data with pca is {df_test_pca.count()}')\nprint(f'Size of data to be used for prediction (with pca) is {df_predict_pca.count()}')"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "###### Training the classifier"
        },
        {
            "cell_type": "code",
            "execution_count": 25,
            "metadata": {},
            "outputs": [],
            "source": "# Training the Random Forest model with featurea on which PCA was not applied\nrfc_model = rfc.fit(df_train)\n\n# Training the Random Forest model with featurea on which PCA was applied\nrfc_model_pca = rfc_pca.fit(df_train_pca)"
        },
        {
            "cell_type": "code",
            "execution_count": 26,
            "metadata": {},
            "outputs": [],
            "source": "# Training the GBT model with featurea on which PCA was not applied\ngbt_model = gbt.fit(df_train)\n\n# Training the GBT model with featurea on which PCA was applied\ngbt_model_pca = gbt_pca.fit(df_train_pca)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='dl'></a>\n#### (B). Deep Learning Model"
        },
        {
            "cell_type": "code",
            "execution_count": 27,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Number of Classes 2\nNumber of Input Features 58\n"
                }
            ],
            "source": "# Number of Classes\nnb_classes = df_train.select(\"label\").distinct().count()\nprint('Number of Classes',nb_classes)\n\n# Number of Inputs or Input Dimensions\ninput_dim = len(df_train.select(\"features_normalized\").first()[0])\nprint('Number of Input Features',input_dim)"
        },
        {
            "cell_type": "code",
            "execution_count": 28,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "WARNING:tensorflow:From /opt/ibm/conda/miniconda3.6/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nColocations handled automatically by placer.\nWARNING:tensorflow:From /opt/ibm/conda/miniconda3.6/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\nInstructions for updating:\nPlease use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"
                }
            ],
            "source": "# Setting up Deep Learning Model \ndeep_model = Sequential()\ndeep_model.add(Dense(256, input_shape=(input_dim,), activity_regularizer=regularizers.l2(0.01)))\ndeep_model.add(Activation('relu'))\ndeep_model.add(Dropout(rate=0.3))\ndeep_model.add(Dense(256, activity_regularizer=regularizers.l2(0.01)))\ndeep_model.add(Activation('relu'))\ndeep_model.add(Dropout(rate=0.3))\ndeep_model.add(Dense(nb_classes))\ndeep_model.add(Activation('sigmoid'))\ndeep_model.compile(loss='binary_crossentropy', optimizer='adam')"
        },
        {
            "cell_type": "code",
            "execution_count": 29,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ndense_1 (Dense)              (None, 256)               15104     \n_________________________________________________________________\nactivation_1 (Activation)    (None, 256)               0         \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 256)               0         \n_________________________________________________________________\ndense_2 (Dense)              (None, 256)               65792     \n_________________________________________________________________\nactivation_2 (Activation)    (None, 256)               0         \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 256)               0         \n_________________________________________________________________\ndense_3 (Dense)              (None, 2)                 514       \n_________________________________________________________________\nactivation_3 (Activation)    (None, 2)                 0         \n=================================================================\nTotal params: 81,410\nTrainable params: 81,410\nNon-trainable params: 0\n_________________________________________________________________\n"
                }
            ],
            "source": "#Model summary\ndeep_model.summary()"
        },
        {
            "cell_type": "code",
            "execution_count": 30,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "ElephasEstimator_4527a245f3f03de329d7"
                    },
                    "execution_count": 30,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# Let's Set and Serialize Optimizer\noptimizer_conf = optimizers.Adam(lr=0.01)\nopt_conf = optimizers.serialize(optimizer_conf)\n\n# Initializing SparkML Estimator\nestimator = ElephasEstimator()\nestimator.setFeaturesCol(\"features_normalized\")\nestimator.setLabelCol(\"label\")\nestimator.set_keras_model_config(deep_model.to_yaml())\nestimator.set_categorical_labels(True)\nestimator.set_nb_classes(nb_classes)\nestimator.set_num_workers(1)\nestimator.set_epochs(25) \nestimator.set_batch_size(64)\nestimator.set_verbosity(1)\nestimator.set_validation_split(0.10)\nestimator.set_optimizer_config(opt_conf)\nestimator.set_mode(\"synchronous\")\nestimator.set_loss(\"binary_crossentropy\")\nestimator.set_metrics(['acc'])"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "#### Training the neural network "
        },
        {
            "cell_type": "code",
            "execution_count": 31,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": ">>> Fit model\n>>> Synchronous training complete.\n>>> Fit model\n>>> Synchronous training complete.\n"
                }
            ],
            "source": "# Createing Deep Learning Pipeline\ndl_pipeline = Pipeline(stages=[estimator])\n\n#Training the model with featurea on which PCA was not applied\nfit_dl_pipeline = dl_pipeline.fit(df_train)\n\n#Training the model with featurea on which PCA was applied\nfit_dl_pipeline_pca = dl_pipeline.fit(df_train_pca)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='test'></a>\n## 7. Model evaluation and best model confirmation <br>\nEvaluating the Machine Learning Models on test data"
        },
        {
            "cell_type": "code",
            "execution_count": 32,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "AUC for Ramdomforest classifier model without pca is  0.705\nAUC for Ramdomforest classifier model with pca is  0.653\nAccuracy for Ramdomforest classifier model without pca is  0.651\nAccuracy for Ramdomforest classifier model with pca is  0.620\n\n\nAUC for GredientBoostedTree classifier model without pca is  0.723\nAUC for GredientBoostedTree classifier model with pca is  0.667\nAccuracy for GredientBoostedTree classifier model without pca is  0.665\nAccuracy for GredientBoostedTree classifier model with pca is  0.622\n\n\n"
                }
            ],
            "source": "#Initializing the evaluation metric: Area Under ROC\nevalu_rfc_binary = BinaryClassificationEvaluator(labelCol='label', metricName='areaUnderROC',rawPredictionCol='rawPrediction' )\nevalu_gbt_binary = BinaryClassificationEvaluator(labelCol='label', metricName='areaUnderROC',rawPredictionCol='rawPrediction')\n\n\n#Initializing the evaluation metric: Accuracy \nevalu_rfc_multi = MulticlassClassificationEvaluator(labelCol='label', metricName='accuracy',predictionCol='prediction')\nevalu_gbt_multi = MulticlassClassificationEvaluator(labelCol='label', metricName='accuracy',predictionCol='prediction')\n\n\n# RandomForest Prediction\nrfc_prediction = rfc_model.transform(df_test)\nrfc_prediction_pca = rfc_model_pca.transform(df_test_pca)\n\n#GBT prediction\ngbt_prediction = gbt_model.transform(df_test)\ngbt_prediction_pca = gbt_model_pca.transform(df_test_pca)\n\n\n#Calculating AUC and Accuracy for Random Forest model\nprint(f'AUC for Ramdomforest classifier model without pca is {evalu_rfc_binary.evaluate(rfc_prediction): .3f}')\nprint(f'AUC for Ramdomforest classifier model with pca is {evalu_rfc_binary.evaluate(rfc_prediction_pca): .3f}')\nprint(f'Accuracy for Ramdomforest classifier model without pca is {evalu_rfc_multi.evaluate(rfc_prediction): .3f}')\nprint(f'Accuracy for Ramdomforest classifier model with pca is {evalu_rfc_multi.evaluate(rfc_prediction_pca): .3f}')\n\nprint('')\nprint('')\n\n#Calculating AUC and Accuracy for Gradient Boosted Tree model\nprint(f'AUC for GredientBoostedTree classifier model without pca is {evalu_gbt_binary.evaluate(gbt_prediction): .3f}')\nprint(f'AUC for GredientBoostedTree classifier model with pca is {evalu_gbt_binary.evaluate(gbt_prediction_pca): .3f}')\nprint(f'Accuracy for GredientBoostedTree classifier model without pca is {evalu_gbt_multi.evaluate(gbt_prediction): .3f}')\nprint(f'Accuracy for GredientBoostedTree classifier model with pca is {evalu_gbt_multi.evaluate(gbt_prediction_pca): .3f}')\n\n\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Evaluating the Deep Learning Model on test data"
        },
        {
            "cell_type": "code",
            "execution_count": 33,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "AUC for Deep Learning Model without PCA is 0.500\nAccuracy for Deep Learning Model without PCA is  0.536\nAUC for Deep Learning Model with pca is 0.500\nAccuracy for Deep Learning Model with pca is  0.529\n"
                }
            ],
            "source": "#Initializing the evaluators: Area Under ROC and Accuracy\ndeep_model_binary = BinaryClassificationEvaluator(labelCol='label', metricName='areaUnderROC',rawPredictionCol='prediction' )\ndeep_model_multi = MulticlassClassificationEvaluator(labelCol='label', metricName='accuracy',predictionCol='prediction')\n\n#Deep Learning Model prediction\ndl_prediction = fit_dl_pipeline.transform(df_test)\ndl_prediction_pca = fit_dl_pipeline.transform(df_test_pca)\n\n#Calculating AUC and Accuracy (without PCA) \nprint(f'AUC for Deep Learning Model without PCA is {deep_model_binary.evaluate(dl_prediction):.3f}')\nprint(f'Accuracy for Deep Learning Model without PCA is {deep_model_multi.evaluate(dl_prediction): .3f}')\nprint('')\n\n#Calculating AUC and Accuracy (with PCA)\nprint(f'AUC for Deep Learning Model with pca is {deep_model_binary.evaluate(dl_prediction_pca):.3f}')\nprint(f'Accuracy for Deep Learning Model with pca is {deep_model_multi.evaluate(dl_prediction_pca): .3f}')\n\n\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='visu'></a>\n## 8. Model Evaluation through vizualization"
        },
        {
            "cell_type": "code",
            "execution_count": 34,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "iVBORw0KGgoAAAANSUhEUgAAAtkAAAJjCAYAAADZHA2NAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJzs3XlcFVX/wPHPAVRcEBfUDBdIDNnkIpiigqKmhor7kuaSZrnm8qhp+TMfs9Si5CFJLcslFUwtM7dMxAXXQCnJLU1ccUPEDVnP74+5TJcdlNTqvF8vXnJnzsycmbnqd858zzlCSomiKIqiKIqiKCXH7ElXQFEURVEURVH+aVSQrSiKoiiKoiglTAXZiqIoiqIoilLCVJCtKIqiKIqiKCVMBdmKoiiKoiiKUsJUkK0oiqIoiqIoJUwF2YqiFJkQorsQYocQ4pYQIkUIcUoIMUsIYfOk61ZShBB2QggphOj0BI5tbzz2eSGEyGP9TiHE2ny2jRJCLM2xzEwI8ZoQYp8Q4rYQ4oEQIlYIMUkIUaGQugwTQpwVQqQLIXY+ynkVcIydxvOVxuPECSEWCSGq5Sg32KSc6c/pv6JeRZXXNc+nXBkhxHghxM9CiDvG+/C7EGKeEMLepJxdjvPLMH4Xvsi6JkKIVvlci2w/f+FpK4pSRBZPugKKovw9CCE+BsYBS4B5wG3AGRgOuADdnlztSlQ84A2ceALHftn4Z22gORD5sDsSQpgBq4HOQAgwE0gFPIDRwLPA+Hy2fQZYAMwH1gCJD1uPIogA3kb7/6gRMAuoB7TNo2xrINnk84O/sF4lQghRDtgGuAGfAtPQ7oMrMAzoiXa/TU0E9gLmgBPwPlAXaAccRvt+ZmkOBALd0b67iqI8JVSQrShKoYQQnYEJwFAp5Vcmq3YJIT5H+8//b08IYSmlfAAceEJVeNl4bDfj7w8dZAOjgB5AOynldpPlO4QQIWjBWX4c0AK8r6SUvz5CHRBClJVSJhdQ5KaUMut6RxqD0tlCiGellJdzlP1ZSnn3UerzBLwPGIAmUsrfTJZHGO/D0Dy2OWlyTfYKIUoD84UQFaSUtzH5fpq8RToipYwr+eorivKwVLqIoihFMR44nCPABkBKmSGl3JL1WQhhI4RYJoRIEELcN6YEeJluY0wLCBRCTBFCxAshkoQQHwuNvxDiN+Nr9fVCiMom22W9Km8nhNgohLhnfJ0+PMf+vYUQG4QQl41lYoQQ/XOUyUpBeMFYx2RgUl7pIib1HS+EuCiESBRChAkhKuXYZ0NjasYD4zn4FyOlwAWtdXMJsAHoJYR4lIaQ8cB3OQJsAKSUD6SU4fnUYwawx/jxF+O1GGxcV9R7+7EQ4v+EEBfR3ngUxy/GP3O27habEGKOEOKoEOKu8b6tNLbS56xvUe6tqxBir/HeHhdCBBTh+OWA14HPcgTYAEgpM6WUXxThVO4AAu3BR1GUvwnVkq0oSoGEEKWAZsDHRdxkPVpL6ETgBjAJrdXOQ0ppmkPbFzgEvAp4oqUJmAG+wP8BZdHSFWajpaSY+hL4Gu31e3dggRDiopRyo3F9XbTX7QvRUgqaA0uEEJlSytAc+wpFS434L3CrgPPqDfyKFjTVAj4BPgBGgh5Q/QhcQWuFtkRLq6kMxBaw3yz9gHRgHdpr/5eBNsZ9FosQojZgj3btimsxcA0txaQ/8AdwxriuqPe2H/Ab2rUp7v8zdYBM4Fwe68xzPHhkSCkLyj+ujnaPLgPVgP+gteS7SSkzTMoVdm/Lot2HG8ZzKwsEARUo+N56AlnpIsVhZjxPc6ABxusspUwq5n4URXmCVJCtKEphqgJlgPOFFRRCdEALaFtJKXcZl+0A4tAChTdMij8AehmDna1CiC7AGKC+lPKscVt3YBC5g+wtUsq3jb//KIR4Di3XdSOAlDLMpE4C2I0WPA1DC6pNBUsp/2dS3i6f00sDukop043lnNEeFEYa17+Kdq28pJSXjGXOAAfz2V9OfYGfpJQJQogf0fKgX+YhgmzA1vhnofcsJynlRSHEMePHX6WUsVDsewvQyZh6UxhhElB6AlOBz6WUV/Iom/MhaBjaQ0F+5zLE5CDmwH7govE8dpsULcq9rY6W8nHRWCaOwtN5njX+ecF0odDy5fU3yVnHNfF9js/HgAGFHEtRlKeMShdRFKWoijJiwQvA9awgDEBKeQ8t+G2Ro+zOHK2Jp4G4rADbZFk1Y06qqe9yfP4W8DQGUgghKgshgoUQ59ACqDS0Vsrn86jzpiKcF2gtiabB0DGgukndGgPRWQE2gJTyEHC1sB0LIZoAzwFhxu1SjefUTQhhWcT65aUkR5kozr0NL2KADdqbiDS0h669aNfrzXzK+qJd56yf9QXtWAjxkjF9JwntLcFF46qc34PC7u0LaPc2a3uklHvRWvwLrEJW8RzLN/Dn9zJNCOGaY/14tPN7Aa1D8W1giyhkRBhFUZ4uKshWFKUwCUAK2mv8wtQk76DyKlAlx7KcrZKp+SwTQM4gO2dwcw3tzVxWJ7ClQB/gI7ROmY2Br9BSOPKqW1EUVrdngOt5bJfXspxeRgu4dgohKhnzgTcBFQF/k3Lp5J+Xa25cD5AV6BflnhVVce5tUa8pwA60+9MCmIsWWM7Kp+wRKWWUyc+N/HYqhGiMFsxeRGsF9gaaGlfn/B4U5d7mFVAXFmRn3YdaOZaPQzvnnG9ospw2nt/PUsr1QADaCD6DCzmeoihPEZUuoihKgaSUaUKIvUB7tJSMgsSjvVbPqQZwswSrlfMY1dECzBvGlt+OwGgp5cKsAsZX9HkpqdbeK4BjHsur5bFMZ6xXb6AUeechv4zWqg1awG6Xz65qYgz6pJQXhBB/oN2zfNMpiqk497Y41zRRShll/H2v0MaDHieEmC+lvFDQhoXohna9+mTlbQsh6j7kvq6g5UbnlNf1MBUN3Ed70NuRtTArf72oLdNSyutCiBtow/kpivI3oVqyFUUpiiDASwgxKOcKoU140sH48SDaa3Zfk/Xl0ILeRxmOLqecY3J3Q3udn4GWP26O1vqeVQcrtNbAv9LPaNcoKx8aIcQLaEFoQVqhBchvAX45fpYDnYz1B23UD0/TYxiP08R4nD0mi4OA7kIIv5wHFEJYCiFaF/3UgMd3b981/pnnGN7FUBZIy9Exsn9+hQvxM9p111ukhRDNKSTIllLeBz4HRgkhHjpAFkLUQHtL8ygPHYqiPGaqJVtRlEJJKX8QQnwCfGkMLr4H7qK17g1H6/y2VUr5o7HVe7UQYgpaqslEtIDnoxKs0ktCiPeBXWg5vS8CXYx1TRJC/AxMF0LcRhupYgqQhJZ+8VdZgrHzpRDiv2jn/F+01tTMArZ7GS1d4X9SyhTTFcb6DwS6oo2mshxtvPLdQohZaC3fTmiB6T6yd5IMQcth3iy08Zh/QkuDcEebjOYHTFpXC/O47q2x4+UyYJgQYqaUsqARXwryE1qLeBDauTYDXnnIfWXd203GIQ7LAu+hjTZSmHfQUmD2CyHmoz0IPUDrnDoIyCD3pDqOxpZrYSw3Ce3vW85Ou4qiPMVUS7aiKEUipfwPWp5zfWAVWhDzHyAcGGFStJtxXRDabIECaJ1jiLdH9Rra7IDrgU7AKCnlBpP1/YCzaEHp/9CGxVtegsfPxdhq2QFtRsLVwAxgMloAnedY0cbhEXsAa3IG2MZ9HkbrhNfP+PkuWuC8B5iDFlRPNR7vJSllpsm2mWj3awxavvM6YAva5CdfG+tXXI/j3oJ2bpZk/14Vi5RyM9rbgR5oudkt0b4rD7Ov+2ipN/fQOqe+i/bdzyu9J69tW6PNuNkB7T78iPYAdhZwz+P6BaKNhLIPbRjL60BLKWWhx1MU5ekhCh5iVFEU5ekhhGiFNg23W9bQck8zIYQ9cAp4XUq55EnXR1EURXl8VLqIoihKCRFCTEWb+OQc2sgeU9FaIdc9yXopiqIoj58KshVFUUqOREsleBat4+UeYKKUsrhTiyuKoih/cypdRFEURVEURVFKmOr4qCiKoiiKoigl7B+RLmJjYyPt7OyedDUURVEURVGUf7jo6OgbUsoCJxqDf0iQbWdnR1RUVOEFFUVRFEVRFOURCCGKNJymShdRFEVRFEVRlBKmgmxFURRFURRFKWEqyFYURVEURVGUEvaPyMnOS1paGhcvXuTBgwdPuiqKoii5WFpaUqtWLUqVKvWkq6IoiqL8Bf6xQfbFixexsrLCzs4OIcSTro6iKIpOSklCQgIXL17E3t7+SVdHURRF+Qv8Y9NFHjx4QNWqVVWArSjKU0cIQdWqVdWbNkVRlH+wf2yQDagAW1GUp5b690lRFOWf7R8dZCuKoiiKoijKk6CC7L+Qubk5BoMBV1dXOnfuzK1bt0pkv3Fxcbi6upbIvkzNmDEDW1tbDAYDBoOBKVOmlPgxssTExLB58+Z81x86dAhfX18cHR1p0KABr732Gvfv32fp0qWMHj26xOrh7++v35fg4GCcnJzo378/GzZsYM6cOSV2nLw0a9YM0O7nqlWr9OUleY7r16/n2LFjea4zvd+urq5s2LBBX7d8+XJcXV1xcXHB2dmZwMBAfV16ejo2NjZMnTq1WHXp0qUL3t7e2ZYNHjyYtWvXZltWoUIF/fdTp07h7++Pg4MDTk5O9O7dm6tXrxbruAVJSUmhT58+ODg40KRJE+Li4nKVOXnypP53wmAwULFiRYKCggC4efMmL774IvXr1+fFF18kMTERgJ07d2Jtba1vM3PmzBKrs6IoivL3oILsv1DZsmWJiYkhNjaWKlWqEBIS8qSrVKjx48cTExNDTExMsYLMjIyMYh2noCD76tWr9OrVi7lz53Ly5EmOHz9Ohw4duHPnTrGOURSbN2+mUqVKAHz22Wds3ryZlStXEhAQUKyHjPT09GIfe9++fUDuILskFRRkw5/3e82aNQwZMoTMzEy2bNlCUFAQ27Zt47fffuPw4cNYW1vr22zbtg1HR0e++eYbpJRFqsetW7c4fPgwt27d4uzZs0Xa5sGDB3Ts2JERI0Zw+vRpjh8/zogRI7h+/XqRti+KL7/8ksqVK3P69GnGjx/PW2+9lauMo6Oj/nciOjqacuXK0a1bNwDmzJlDmzZt+P3332nTpk22vzM+Pj76dtOnTy+xOiuKoih/DyrIfky8vb25dOkSAHfv3qVNmzY0atQINzc3vv/+e0ALtpycnBg2bBguLi60a9eO5ORkAKKjo3F3d8fb2ztbsP7gwQNeffVV3Nzc8PDwICIiAtBaQ7t27Urnzp2xt7dn/vz5fPLJJ3h4eNC0aVNu3rxZ5LqHh4fj4eGBm5sbQ4YMISUlBdCms585cyYtWrRgzZo1nDlzhg4dOuDp6YmPjw8nTpwAYM2aNbi6uuLu7o6vry+pqalMnz6d1atXYzAYWL16dbbjhYSEMGjQIL3VUwhBz549qVGjRrZyP/zwA02aNMHDw4O2bdvqLZy7du3SWxA9PDy4c+cO8fHx+Pr66q22e/bs0c/hxo0bDB8+nD/++IOAgADmzZuXrTX5+vXr9OjRg8aNG9O4cWP27t0LaC3Br7/+Ou3atWPgwIHZ6jZy5Ei9Zbhbt24MGTIE0IK6adOmAX+22E6ZMoU9e/ZgMBiYN28eAJcvX6ZDhw7Ur1+fyZMn6/sNDQ3Fzc0NV1fXbAGhaevv2rVrGTx4MPv27WPDhg1MmjQJg8HAmTNn8r3HTk5OWFhYcOPGDWbPnk1gYCDPPvssoA01N2zYsGx1GDt2LHXq1OHAgQP57tPUunXr6Ny5M3379iUsLKxI26xatQpvb286d+6sL/Pz8yvRtzjff/89gwYNAqBnz56Eh4cX+OAQHh5OvXr1qFu3bq7tBw0axPr160usboqiKMrf2z92CD9T47aOI+ZKTInu0/CMgaAOQUUqm5GRQXh4OEOHDgW0oOW7776jYsWK3Lhxg6ZNmxIQEADA77//TmhoKF988QW9e/dm3bp1vPLKK7z66qt8+umntGzZkkmTJun7zgq4jx49yokTJ2jXrh2nTp0CIDY2liNHjvDgwQMcHByYO3cuR44cYfz48Sxfvpxx48blquu8efNYsWIFAHPnzqVly5YMHjyY8PBwnn/+eQYOHMiCBQv0bS0tLYmMjASgTZs2LFy4kPr163Pw4EFGjhzJjh07mDlzJj/++CO2trbcunWL0qVLM3PmTKKiopg/f36uOsTGxuqBS0FatGjBgQMHEEKwePFiPvzwQz7++GMCAwMJCQmhefPm3L17F0tLSz7//HPat2/PO++8Q0ZGBvfv38+2r4ULF7J161YiIiKwsbFh6dKl+rqxY8cyfvx4WrRowfnz52nfvj3Hjx8HtIefyMhIypYtm21/vr6+7Nmzh4CAAC5dukR8fDwAkZGR9O3bN1vZOXPmEBgYyMaNGwHtASkmJoYjR45QpkwZHB0dGTNmDObm5rz11ltER0dTuXJl2rVrx/r16+natWue16dZs2YEBATQqVMnevbsWeC1PHjwIGZmZlSrVo3Y2Fg8PT3zLJecnEx4eDiLFi3i1q1bhIaG6g9D06dPx8vLS/8umwoNDeXdd9+lRo0a9OzZs0ipJgXVw9SdO3fw8fHJc92qVatwdnbOd9tLly5Ru3ZtACwsLLC2tiYhIQEbG5s8y4eFhfHyyy/rn69evUrNmjUBqFmzJteuXdPX7d+/H3d3d5599lkCAwNxcXEp9FwURVGUf45/RZD9pCQnJ2MwGIiLi8PT05MXX3wR0MbIffvtt9m9ezdmZmZcunRJb4W1t7fHYDAA4OnpSVxcHElJSdy6dYuWLVsCMGDAALZs2QJoQduYMWMAaNCgAXXr1tWDbD8/P6ysrLCyssLa2lpvEXRzc+PXX3/Ns87jx49n4sSJ+udffvkFe3t7nn/+eUBrrQsJCdGD7D59+gBa6/y+ffvo1auXvm1Wi3fz5s0ZPHgwvXv3pnv37o90TU1dvHiRPn36EB8fT2pqqj7ecPPmzZkwYQL9+/ene/fu1KpVi8aNGzNkyBDS0tLo2rWrfo2LYvv27dlSLm7fvq2nrgQEBOQKsEFLFQgKCuLYsWM4OzuTmJhIfHw8+/fvJzg4uNBjtmnTRk/RcHZ25ty5cyQkJNCqVSuqVasGQP/+/dm9e3e+QXZRZD1UWVlZsXr16kJHvNi4cSN+fn6UK1eOHj168N577zFv3jzMzc3zzTu+evUqp0+fpkWLFgghsLCwIDY2FldX1zyPV9xRN6ysrIiJebiH6LxarfM7fmpqKhs2bGD27NmF7rdRo0acO3eOChUqsHnzZrp27crvv//+UHVUFEVR/p7+FUF2UVucS1pWTnZSUhKdOnUiJCSEN998k5UrV3L9+nWio6MpVaoUdnZ2+ni5ZcqU0bc3NzcnOTkZKWW+//EX9GrbdF9mZmb6ZzMzsyLnEBeWc1u+fHkAMjMzqVSpUp7BzsKFCzl48CCbNm3CYDAUGhC5uLgQHR1Nly5dCiw3ZswYJkyYQEBAADt37mTGjBmAln7RsWNHNm/eTNOmTdm+fTu+vr7s3r2bTZs2MWDAACZNmpQrxSM/mZmZ7N+/P89gOuv8c7K1tSUxMZGtW7fi6+vLzZs3+eabb6hQoQJWVlaFHjPn9yA9Pb3Ae2H6/SjO2Ms5H6rgz+vfunXrXOVDQ0PZu3cvdnZ2ACQkJBAREUHbtm3zPcbq1atJTEzUH4Ju375NWFgYs2bNomrVqnpnQdA6Ema1Iru4uLBr165Cz+FRWrJr1arFhQsXqFWrFunp6SQlJVGlSpU8y27ZsoVGjRplS1uqUaMG8fHx1KxZk/j4eKpXrw5AxYoV9TL+/v6MHDmSGzdu5NtCriiKovzzqJzsx8Da2prg4GACAwNJS0sjKSmJ6tWrU6pUKSIiIjh37lyB21eqVAlra2s9LWPlypX6Ol9fX/3zqVOnOH/+PI6OjiVW9wYNGhAXF8fp06cB+Prrr/UWdVMVK1bE3t6eNWvWAFpw/ssvvwBw5swZmjRpwsyZM7GxseHChQtYWVnl25Fx9OjRLFu2jIMHD+rLVqxYwZUrV7KVS0pKwtbWFoBly5bpy8+cOYObmxtvvfUWXl5enDhxgnPnzlG9enWGDRvG0KFDOXz4cJGvQbt27bKltRS11dTb25ugoCB8fX3x8fEhMDAwz2CwoGthqkmTJuzatYsbN26QkZFBaGiofi9q1KjB8ePHyczM5Lvvviv2vk1NnTqVyZMn69c7JSWF4OBgbt++TWRkJOfPnycuLo64uDhCQkIIDQ0tcH+hoaFs3bpV3yY6OlrPy27VqhWrV68mNTUV0FJl/Pz8AOjXrx/79u1j06ZN+r62bt3K0aNHs+0/qyU7r5+CAmzQ3kRkfXfWrl1L69at832gDQ0NzZYqknP7ZcuW6Q+GV65c0R+KDh06RGZmJlWrVi2wLoqiKMo/iwqyHxMPDw/c3d0JCwujf//+REVF4eXlxcqVK2nQoEGh2y9ZsoRRo0bh7e2drUV15MiRZGRk4ObmRp8+fVi6dGm2VtBHZWlpyZIlS+jVqxdubm6YmZkxfPjwPMuuXLmSL7/8End3d1xcXPQOnZMmTdI76/n6+uLu7o6fnx/Hjh3Ls+NjjRo1CAsLY+LEiTg6OuLk5MSePXuytQ6C1vGwV69e+Pj4ZGshDAoK0jtali1blpdeeomdO3fqHSHXrVvH2LFji3wNgoODiYqKomHDhjg7O7Nw4cIibefj40N6ejoODg40atSImzdv5hlkN2zYEAsLC9zd3fWOj3mpWbMms2fPxs/PD3d3dxo1aqQHdXPmzKFTp060bt1azxEG6Nu3Lx999BEeHh4Fdnw05e/vz6hRo2jbti0uLi54enqSnp7Ot99+S+vWrbN9v7p06cKGDRtISUlh+vTp2YYBBK0z7/nz52natKm+zN7enooVK3Lw4EE6deqEj48Pnp6eGAwG9u7dy9y5cwHtTdDGjRv59NNPqV+/Ps7OzixdulRvLS4JQ4cOJSEhAQcHBz755BN9dJDLly/j7++vl7t//z4//fRTrnSnKVOm8NNPP1G/fn1++uknfUSatWvX6t/BN998k7CwMDX5jKIoyr+MKOoQXE8zLy8vGRUVlW3Z8ePHcXJyekI1UhRFKZz6d0pRFOXvRwgRLaX0KqycaslWFEVRFEVRlBKmgmxFURRFURRFKWEqyFYURVEURVGUEvZYg2whxFdCiGtCiNh81gshRLAQ4rQQ4lchRKPHWT9FURRFURRFKQmPuyV7KdChgPUvAfWNP68DCx5DnRRFURRFURSlRD3WyWiklLuFEHYFFOkCLJfakCcHhBCVhBA1pZTxj6WCiqIoiqIoyl8vMxPu3oUHD+DSJe335GSIjYXffiNFZJJy9AgZMpUt9m5U8bpBBmY8434NyypplCmXgoNz0YamfVKetpxsW+CCyeeLxmW5CCFeF0JECSGirl+//lgqV1xXr16lX79+PPfcc3h6euLt7a1PFLJz506sra0xGAw0bNiQtm3bcu3aNZYsWYLBYMBgMFC6dGnc3NwwGAz6+LumDh06hK+vL46OjjRo0IDXXnuN+/fvs3TpUkaPHl1i5+Hv78+tW7cAbcxoJycn+vfvz4YNG/Rxhf8qzZo1A7TxlletWqUvL8lzXL9+fbZp003NmDEDW1tbDAYDrq6u2caBXr58Oa6urri4uODs7ExgYKC+Lj09HRsbG6ZOnVqsunTp0gVvb+9sywYPHszatWuzLatQoYL++6lTp/D398fBwQEnJyd69+7N1atXi3XcgqSkpNCnTx8cHBxo0qQJcXFxucqcPHlS/94aDAYqVqxIUJA20+qkSZNo0KABDRs2pFu3bvp36dChQ3p5d3f3bJPoKIqiKP8Qp07B6tUwcSK8/TZ3HepyqYEt9yuUAWtrqFEDGjUCX19o3x7e+w9s+4rSV5eS8V0clQ8dp9/qb+gwaQcdJ23HxfckLl7HifutNunpaU/67AompXysP4AdEJvPuk1AC5PP4YBnYfv09PSUOR07dizXsscpMzNTNm3aVC5YsEBfFhcXJ4ODg6WUUkZERMiOHTvq66ZMmSKnT5+ebR9169aV169fz3P/V65ckXXq1JH79u3Tj7dmzRp55coVuWTJEjlq1KiSPiUppZSOjo7yjz/+eKht09LSHvq4Oa9XSZ7joEGD5Jo1a/Jc9+6778qPPvpISql9p6pWrSozMjLk5s2bpYeHh7x06ZKUUsrk5GT5+eef69tt2rRJNmvWTD733HMyMzOzSPVITEyUtWrVkg0aNMh2jfOqX/ny5fXjOjg4yA0bNujrduzYIY8ePVqkYxZFSEiIfOONN6SUUoaGhsrevXsXWD49PV3WqFFDxsXFSSml/PHHH/V7P3nyZDl58mQppZT37t3Tl1++fFlWq1btkb4jf0dP+t8pRVGUR5aRIeWZM1Ju2SJlWJiU77wjZYcOUrZvLyXk+kk2R14pj/zG1UzO9EUGDrKVWxZWlzvCbeXx4w4yZ5gXH19Dfr1qvLx377CUsmj/n/7VgChZhJj3saaLFMFFoLbJ51rA5SdUl0eyY8cOSpcunW12xLp16zJmzJhcZaWU3LlzBwcHhyLvPyQkhEGDBumtnkIIevbsmavcDz/8wKxZs0hNTaVq1aqsXLmSGjVqsGvXLn3WQyEEu3fv5u7du/Tp04fbt2+Tnp7OggUL8PHxwc7OjqioKKZNm8Yff/xBQEAAQ4YMoXLlykRFRTF//nyuX7/O8OHDOX/+PKDNuti8eXNmzJjB5cuXiYuLw8bGJltr9MiRI+nQoQMBAQF069aNypUr89VXX/Hll19y9uxZZs2aRYUKFbh79y5Tpkzh+PHjGAwGBg0aROXKlbl8+TIdOnTgzJkzdOvWjQ8//BDQpr/+4IMPkFLSsWNHfQbBrH2BNiPfxo0bef3119mwYQO7du1i1qxZrFu3jnr16uV5zZ2cnLCwsODGjRvMnj2bwMBAnn32WUCbGXPYsGF62dDQUMaOHcuCBQs4cOBArtbpvKxbt47OnTvrM14WpRV81apVeHt707lzZ31Z1rTkJeX7779nxowZAPTs2ZPRo0cjpcx3BsPw8HDq1atH3bp1AW1a+ixNmzaYnwQrAAAgAElEQVTVW+XLlSunL3/w4IGaEVFRFOVpdPWqlsKxYQPpPx8i/U4S91LvkJmcTLULCfludqeM4GgtkAICm8FBW0ipASH+brzk4ElnjtEx8yzlyl3Ktt3Bgy+wc+cwUlKsOHHCj5CQ6rzy8l99kn+Npy3I3gCMFkKEAU2AJFkS+djjxkFMzCPvJhuDAYyvw/Py22+/0ahRwYOj7NmzB4PBQEJCAuXLl+eDDz4o8uFjY2MZNGhQoeVatGjBgQMHEEKwePFiPvzwQz7++GMCAwMJCQmhefPm3L17F0tLSz7//HPat2/PO++8Q0ZGBvfv38+2r4ULF7J161YiIiKwsbFh6dKl+rqxY8cyfvx4WrRowfnz52nfvj3Hjx8HIDo6msjIyGzTwQP4+vqyZ88eAgICuHTpEvHx2q2OjIykb9++2crOmTOHwMBANm7cCGjpIjExMRw5coQyZcrg6OjImDFjMDc356233iI6OprKlSvTrl071q9fT9euXfO8Ps2aNSMgIIBOnTrl+ZBi6uDBg5iZmVGtWjViY2Px9PTMs1xycjLh4eEsWrSIW7duERoaqgfZ06dPx8vLi4CAgFzbhYaG8u6771KjRg169uxZpCC7oHqYunPnTp5TuoMWqDs7O+e77aVLl6hdW3v2tbCwwNramoSEhGxT2ZsKCwvj5Zfz/hfxq6++ok+fPvrngwcPMmTIEM6dO8fXX3+NhcXT9k+SoijKP1RGBiQkQHy89mdqqvZz4ACkp2vL16/XcqWNLIw/256HB1Zg7mrGg9LmXKtoTsQzD3imdgMSa1hzsvRtXJ91pWXdq7g/8wzf1NyKhZlAiCTgKHCUCxdqYWFhTmDg/3HvXnmOHOnPu+/WolkzaNLkCV2TEvZY/0cTQoQCrQAbIcRF4F2gFICUciGwGfAHTgP3gVcfZ/3+SqNGjSIyMpLSpUvz888/A+Dj46MHjXPnzmXy5MksXLiwRI978eJF+vTpQ3x8PKmpqdjb2wPQvHlzJkyYQP/+/enevTu1atWicePGDBkyhLS0NLp27YrBYCjycbZv354tr/n27dvcuXMHgICAgFwBNmjnHxQUxLFjx3B2diYxMZH4+Hj2799PcHBwocds06YN1tbWADg7O3Pu3DkSEhJo1aoV1apVA6B///7s3r073yC7KObNm8eKFSuwsrJi9erVhba4bty4ET8/P8qVK0ePHj147733mDdvHubm5sycOTPPba5evcrp06dp0aIFQggsLCyIjY3F1dU1z+MVt9XXysqKmId80NTejBXt+KmpqWzYsIHZs2fnWvf+++9jYWFB//799WVNmjTht99+4/jx4wwaNIiXXnoJS0vLh6qnoiiKko+MDIiOhvnztU6Ghw5lC57zcqesOaXSMkgqD9P9IKqWGbV9OtK5QRcsLSxpV68d1cpX08uP13+TwIdA7r5k27e3ISysL8uXD+T110vTujW88w6Ym5fUiT5dHvfoIgU2+BvzXEaV+IELaHH+q7i4uLBu3Tr9c0hICDdu3MDLK++p7gMCAujRo0ex9h8dHU2XLl0KLDdmzBgmTJhAQEAAO3fu1F/7T5kyhY4dO7J582aaNm3K9u3b8fX1Zffu3WzatIkBAwYwadIkBg4cWKT6ZGZmsn///jyD6fLly+e5ja2tLYmJiWzduhVfX19u3rzJN998Q4UKFbCysir0mGXKlNF/Nzc3Jz09Pc+AMItpYPjgwYNC959l/PjxTJw4MduyrOvfunXrXOVDQ0PZu3cvdnZ2ACQkJBAREUHbtm3zPcbq1atJTEzUH4Ju375NWFgYs2bNomrVqiQmJuplb968qbciu7i4sGvXrkLP4VFasmvVqsWFCxeoVasW6enpJCUlUaVKlTzLbtmyhUaNGlGjRo1sy5ctW8bGjRsJDw/PM0B3cnKifPnyxMbG5vt3RFEURcnDtWsQHg5paX/+pKbCL7/A8eNaMH30aLZNZOPGXBH3iK0Om63isbAsx2HLRBIz7pNqDidtIN08A0sLS1yquTC95XQWPN8JM5HfeBmngBXAr8D3+tKTJ51p0+ZHrlx5howMCzw8ICwMPv8czJ62oTf+Aurd7F+kdevWvP322yxYsIARI0YA5Eq/MBUZGZlvLnBeRo8ezQsvvEDHjh1pYnyvsmLFilyBXFJSEra22gAty5Yt05efOXMGNzc33Nzc2L9/PydOnKBs2bLY2toybNgw7t27x+HDh4scZLdr14758+czadIkAGJiYorUEu7t7U1QUBA7duwgISGBnj175pm2YWVlpbeMF6RJkyaMHTuWGzduULlyZUJDQ/U8+Bo1anD8+HEcHR357rvv9EC+qPs2NXXqVCZPnszGjRt55plnSElJYdGiRQwePJjIyEguXLigPwQsWbKE0NDQAoPs0NBQtm7dqqeVnD17lhdffJFZs2bRqlUrgoKCGDRoEKVLl2bp0qV63nW/fv2YPXs2mzZtomPHjgBs3boVW1tb3Nzcsl2/h23JDggIYNmyZXh7e7N27Vpat26db0t2aGhorlSRrVu3MnfuXHbt2pUtD/vs2bPUrl0bCwsLzp07x8mTJ/UHE0VRFCUfSUlaUB0TAwsWwI0bhW6S3vQFzlTMYHM7e0452rDu+Dqu39dGZnOt7opA4FGzDS2s7ahbqS6eNT1xqe6ChVl+YaIEdgM7gD/f0GZkWBIb25LffnuW/v1XAoI6dbQYv0ED+Ld1vVFB9l9ECMH69esZP348H374IdWqVaN8+fJ6Jzz4MydbSom1tTWLFy8u8v6zOsdNnDiRa9euYWZmhq+vL927d89WbsaMGfTq1QtbW1uaNm3K2bNnAa1jYkREBObm5jg7O/PSSy8RFhbGRx99RKlSpahQoQLLly8vcn2Cg4MZNWoUDRs2JD09HV9f3yKlvvj4+LBt2zYcHByoW7cuN2/ezLPFtWHDhlhYWODu7s7gwYOpXLlynvurWbMms2fPxs/PDykl/v7+emv/nDlz6NSpE7Vr18bV1VXvBNm3b1+GDRtGcHAwa9euLdLDjr+/P1evXqVt27Z6J8AhQ4bw7bff0rp162yt7F26dGHy5MmkpKTw/vvv58rJjouL4/z58zRt2lRfZm9vT8WKFTl48CCdOnUiOjoaT09PzM3NqVevnn5ty5Yty8aNGxk3bhzjxo2jVKlSNGzYkP/973+FnkNRDR06lAEDBuDg4ECVKlUICwsD4PLly7z22mts3rwZ0B4if/rpJxYtWpRt+9GjR5OSksKLL74IaJ0fFy5cSGRkJHPmzKFUqVKYmZnx2Wef5ZvnrSiK8q938CBMnQoREdmXe3nB669rQ+CVLQulSnH6zjlO3D1HaNwGNp7ayO2UQ1rZu9FYHbXCtqItAY4BfNzuY6wtrYtYgdvAXuAb48+fDYcxMe7MnfsWYWF/NrK4uMDGjfBvbjsRBb1e/7vw8vKSUVFR2ZYdP34cJyenJ1QjRVGUwql/pxRFyeXOHVixQsuj/uADLf3j5k1t8pYsb74Jw4cj69UjJuE3Vv+2mt+u/8aFpAskJCdw8fbFbLvsWL8jfV370sOpB2VL5U7rLNynwJv6p8xMM3bvHsCkSaOIimoMaMNdBwZqLdYeHv/cPGsAIUS0lLLQ3EbVkq0oiqIoivK4ZWRAXBycOwdRUXDvnpasfOVK7rIjR2ozI77xBrzwAvdS7/HaD68R9k1YtmLmwpza1rXp59aP5rWb0+n5TtSxrlPciqGNqDwaSAL26GumTJnNF18M4+bNqvqy4cOhTx9o1aqYh/kXUEG2oiiKoijK43DtGixdCosXw++/515vbq4lLs+YASNG8KC0Gftu/sLg9YMpZV6KtL0/kbo7lav3/pzVd4TXCDo/35kODh0ecb6BZGAY2kBvf3a2/+UXfxITUxk48EsuXKjDkCHayMj164MaDKpgKshWFEVRFEX5q0gJa9ZoU4t/++2fy+3s4KWXoG1bqFIFvL2hTBkyMjNYfHgxa7f2Y/sf27PtarBhMGXMy+ijfgx0H0gZizI8vDTgd+BtTEcF2bLlVb74ogvffaf1aTI3h44d4ccfQWW4FZ0KshVFURRFUUpCejqcPAm//gpnz8Lt22Ay4AEA8+bB4MFQqVK2xYnJibRe1JSYK3+OBFWlbBX6uPThtUav0ahmwRPcFU8C8DHw55wGqalWTJkyg6CgcUhpRtmyWjX79dOeA/5tI4OUBBVkK4qiKIqiPKyTJyE4WBv1wzjTcTZly4K1tTbkXo45BDJlJkevHqXHNz04k3hGX97KrhWruq+iplXNEqpkJnAYbdi9H9BGCUkD4PDh/nzwQVe++64bmZlab8UTJ6BePVCT8D4adfkURVEURVEKcveuNktiSor2c/QolCql5U6npPxZrlYt6NUL/Py0Mexq1tSC7Bx2xe0iICyA2ym3sy3/b6v/8o7PO5ibldTQHBK4BngA8X8ulbUJDw+hX7/WXL+uTRg3diy89x4UYS44pYj+BfPtPDnm5uYYDAZcXV3p3Lkzt27dKpH9xsXF4erqWiL7MjVjxgxsbW0xGAwYDAamTMk9JWpJiYmJ0cdXzsuhQ4fw9fXF0dGRBg0a8Nprr3H//n2WLl3K6NGjS6we/v7++n0JDg7GycmJ/v37s2HDBubMmVNix8lLs2bNAO1+rlq1Sl9e1HNs1aoVjo6OuLu707x5c06ePAlAWloaU6ZMoX79+ri6uvLCCy+wZcsWfbsjR44ghODHH38scl3T09OxsbFh6tSp2Zbb2dlxw2QihJ07d9KpUyf985YtW/Dy8sLJyYkGDRrkmjnzUZ09e5YmTZpQv359+vTpQ2pqap7lfv31V7y9vXFxccHNzU2f8TPrGmZ9569duwbAwoULcXNzw2Aw0KJFC44dO1ai9VYU5Sl39Sps2wZvvQW2tlrk2aYN+PtDt24wfbo2ZnVWgL15s5Z7feECfPIJdO4Mzz2nB9hSSvZd2MeiqEW4fOZCq2WtuJ1ym6a1mjLNZxrf9v4W+a5kesvpJRRgpwHT0cK8Z8gKsO/c2ULDhkmYmZ3nxRc7c/16eT7/XBsdMChIBdglTkr5t//x9PSUOR07dizXssetfPny+u8DBw6Us2bNKpH9nj17Vrq4uJTIvky9++678qOPPnqobdPT04tVfsmSJXLUqFF5rrty5YqsU6eO3Ldvn5RSyszMTLlmzRp55cqVArd7VI6OjvKPP/54qG3T0tIe+rgRERGyY8eO+ueinmPLli3lzz//LKWUctGiRbJz585SSinfeustOXDgQPngwQMppXY9V69erW83adIk2aJFCzlo0KAi13HTpk2yWbNm8rnnnpOZmZn68rp168rr16/neS5Hjx6Vzz33nDx+/LiUUrtGISEhRT5mUfTq1UuGhoZKKaV844035GeffZarTFpamnRzc5MxMTFSSilv3Lihf19Nr6GppKQk/ffvv/9etm/fvkTrneVp+HdKURSjjAwp582TUguXs/+UKSPl9OlS7t8v5eHDUh47JuW9e1Ka/HtoKj0jXZ64fkJ+GPmhbLW0lWQG2X6afNFEHrhwoAQqnSmlvCelvCGlXCSlbCildJJ/hkgVpJQvSSk/l//9771sp/Tee9ppKMUHRMkixKeqJfsx8fb25tKlSwDcvXuXNm3a0KhRI9zc3Pj+e61Hb1xcHE5OTgwbNgwXFxfatWtHcnIyANHR0bi7u+Pt7U1ISIi+3wcPHvDqq6/i5uaGh4cHEcaZoJYuXUrXrl3p3Lkz9vb2zJ8/n08++QQPDw+aNm3KzZs3i1z38PBwPDw8cHNzY8iQIaQYn9zt7OyYOXMmLVq0YM2aNZw5c4YOHTrg6emJj48PJ06cAGDNmjW4urri7u6Or68vqampTJ8+ndWrV2MwGFi9enW244WEhDBo0CB9inEhBD179qRGjly2H374gSZNmuDh4UHbtm25elUb0mjXrl16y6SHhwd37twhPj4eX19f/c3Cnj179HO4ceMGw4cP548//iAgIIB58+Zla02+fv06PXr0oHHjxjRu3Ji9e/cCWsv/66+/Trt27XJNPz9y5Eg2bNgAQLdu3RgyZAgAX375JdOmTQOgQoUKAEyZMkWf/XPevHmANptihw4dqF+/PpMnTy70Hvn6+nL69Gnu37/PF198waeffqrPOlmjRg169+4NaA/Va9euZenSpWzbtk1v0S1MaGgoY8eOpU6dOhw4cKBI23z44Ye88847NGjQAAALCwtGjhxZpG2LQkrJjh076NmzJwCDBg1i/fr1ucpt27aNhg0b4u7uDkDVqlUxL2SWhIoVK+q/37t37xGHxVIU5amVlgZHjsD772tDaIwfry13coKvv4b9+7Vm3gcP4L//haZNtZlWnJygXLlsvQET7icQdCCIZwKfweI9CxqENGDy9snsjNsJwEsOLxE1LIrkd5I58NoBmtRq8pCVzgACASe0lurygA3wBvAr2mghg4FZwG1++WUzPXsO4913ywHwxRfaaU+bpkYK+av9K3Kyx43T+huUJINBe7VSFBkZGYSHhzN06FAALC0t+e6776hYsSI3btygadOm+jTbv//+O6GhoXzxxRf07t2bdevW8corr/Dqq6/y6aef0rJlSyZNmqTvOyvgPnr0KCdOnKBdu3acOnUKgNjYWI4cOcKDBw9wcHBg7ty5HDlyhPHjx7N8+XLGjRuXq67z5s1jxYoVAMydO5eWLVsyePBgwsPDef755xk4cCALFizQt7W0tCQyMhKANm3asHDhQurXr8/BgwcZOXIkO3bsYObMmfz444/Y2tpy69YtSpcuzcyZM4mKimL+/Pm56hAbG8ugQYMKva4tWrTgwIEDCCFYvHgxH374IR9//DGBgYGEhITQvHlz7t69i6WlJZ9/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\n",
                        "text/plain": "<Figure size 864x720 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "#Creating class for visualization AUC curve as pyspark don't provide it out-of-the-box for rf and gbt\nclass CurveMetrics(BinaryClassificationMetrics):\n    def __init__(self, *args):\n        super(CurveMetrics, self).__init__(*args)\n\n    def _to_list(self, rdd):\n        points = []\n        for row in rdd.collect():\n            points += [(float(row._1()), float(row._2()))]\n        return points\n\n    def get_curve(self, method):\n        rdd = getattr(self._java_model, method)().toJavaRDD()\n        return self._to_list(rdd)\n\n\n\n#Random forest \npreds_rfc = rfc_prediction.select('label','probability').rdd.map(lambda row: (float(row['probability'][1]), float(row['label'])))\npoints_rfc = CurveMetrics(preds_rfc).get_curve('roc')\n\npreds_rfc_pca = rfc_prediction_pca.select('label','probability').rdd.map(lambda row: (float(row['probability'][1]), float(row['label'])))\npoints_rfc_pca = CurveMetrics(preds_rfc_pca).get_curve('roc')\n\n#GBT classifier\npreds_gbt = gbt_prediction.select('label','probability').rdd.map(lambda row: (float(row['probability'][1]), float(row['label'])))\npoints_gbt = CurveMetrics(preds_gbt).get_curve('roc')\n\npreds_gbt_pca = gbt_prediction_pca.select('label','probability').rdd.map(lambda row: (float(row['probability'][1]), float(row['label'])))\npoints_gbt_pca = CurveMetrics(preds_gbt_pca).get_curve('roc')\n\n###Plotting AUC\nplt.figure(figsize=(12,10))\n\n#RF(without PCA)\nx_rfc = [x[0] for x in points_rfc]\ny_rfc = [x[1] for x in points_rfc]\n\n#RF(with PCA)\nx_rfc_pca = [x[0] for x in points_rfc_pca]\ny_rfc_pca = [x[1] for x in points_rfc_pca]\n\n#GBT(without PCA)\nx_gbt = [x[0] for x in points_gbt]\ny_gbt = [x[1] for x in points_gbt]\n\n#GBT(with PCA)\nx_gbt_pca = [x[0] for x in points_gbt_pca]\ny_gbt_pca = [x[1] for x in points_gbt_pca]\n\nplt.title('Comparing AUC for RF and GBT', fontsize=15)\nplt.xlabel('False Positive Rate(1-Specificity)', fontsize=15)\nplt.ylabel('True Positive Rate(Sensitivity)', fontsize=15)\nplt.plot(x_rfc, y_rfc, color = 'green', label = f'Random Forest Classifier without PCA: AUC = {evalu_rfc_binary.evaluate(rfc_prediction): .3f}')\nplt.plot(x_gbt, y_gbt, color= 'red', label = f'GBT Classifier without PCA: AUC = {evalu_gbt_binary.evaluate(gbt_prediction): .3f}')\nplt.plot(x_rfc_pca, y_rfc_pca, color = 'blue', label = f'Random Forest Classifier with PCA: AUC = {evalu_rfc_binary.evaluate(rfc_prediction_pca): .3f}')\nplt.plot(x_gbt_pca, y_gbt_pca, color= 'yellow', label = f'GBT Classifier with PCA: AUC = {evalu_gbt_binary.evaluate(gbt_prediction_pca): .3f}')\nplt.legend()\nplt.show()"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='tuning'></a>\n## 9. Tuning the best classifier\nSo, the best predictor is GBTClassifier. Let's tune it further to get better prediction."
        },
        {
            "cell_type": "code",
            "execution_count": 35,
            "metadata": {},
            "outputs": [],
            "source": "#Initializing the ParamGridBuilder\ngrid = ParamGridBuilder().addGrid(gbt.maxDepth, [5,10, 20])\\\n                         .addGrid(gbt.maxBins, [15,30,60])\\\n                         .addGrid(gbt.maxIter, [5,10, 20])\\\n                         .build()\n            \n#Initializing evaluator\nevaluator = MulticlassClassificationEvaluator( metricName='accuracy')\n\n#Initiazising the cross validator\ncv = CrossValidator(estimator=gbt, estimatorParamMaps=grid, evaluator=evaluator, parallelism=2, numFolds=5)\n\n#Fitting the model\ngbt_model = cv.fit(df_transformed)\n\n#Saving the model\ngbt_model.save('best_model.h5')"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Best model prediction and score"
        },
        {
            "cell_type": "code",
            "execution_count": 36,
            "metadata": {},
            "outputs": [],
            "source": "#Initializing the evaluators: Area Under ROC and Accuracy\nevalu_gbt_binary = BinaryClassificationEvaluator(labelCol='label', metricName='areaUnderROC',rawPredictionCol='rawPrediction')\nevalu_gbt_multi = MulticlassClassificationEvaluator(labelCol='label', metricName='accuracy',predictionCol='prediction')\n\n#Transform the test data to get prediction\ngbt_prediction = gbt_model.transform(df_test)\n\n#Calculation of score\nprint(f'AUC for GredientBoostedTree classifier model = {evalu_gbt_binary.evaluate(gbt_prediction)}')\nprint(f'Accuracy for GredientBoostedTree classifier model = {evalu_gbt_multi.evaluate(gbt_prediction)}')\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='pred'></a>\n## 10. Predicting and visualizing prediction results"
        },
        {
            "cell_type": "code",
            "execution_count": 37,
            "metadata": {},
            "outputs": [],
            "source": "#df_predict which was seperated for prediction during train test split is used for predicting\n\n#Transform the df_predict by out best model gbt_model\npredic_data = gbt_model.transform(df_predict)\npredic_data = predic_data.toPandas()\n\n#select label and prediction column only\npredic_data =predic_data[['label', 'prediction']]\n"
        },
        {
            "cell_type": "code",
            "execution_count": 38,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Number of correctly predicted labels are 11\nNumber of wrongly predicted labels are 4\n"
                }
            ],
            "source": "# let's check how many label are correctly predicted\ncorrect=[]\nwrong=[]\nfor m,n in zip(predic_data['label'], predic_data['prediction']):\n    if m ==n:\n        correct.append('Yes')\n    else:\n        wrong.append('No')\nprint(f'Number of correctly predicted labels are {len(correct)}')\nprint(f'Number of wrongly predicted labels are {len(wrong)}')"
        },
        {
            "cell_type": "code",
            "execution_count": 39,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Each label count in original data:\n\n  popularity  count\n0    Popular      9\n1  Unpopular      6\n\n\nEach label count in predicted data:\n\n  popularity  count\n0    Popular      5\n1  Unpopular     10\n"
                }
            ],
            "source": "#Seperate predicted label and original label and map 0:Popular and 1: Unpopular\n\n\n#count of each original label\noriginal_label = predic_data.groupby('label').count()\noriginal_label.reset_index(drop=False, inplace = True)\noriginal_label.columns = 'popularity', 'count'\noriginal_label['popularity'] = original_label['popularity'].map({1: 'Unpopular', 0: 'Popular'})\nprint('Each label count in original data:')\nprint('')\nprint(original_label)\nprint('')\nprint('')\n\n#count of each predicted label\npredicted_label = predic_data.groupby('prediction').count()\npredicted_label.reset_index(drop=False, inplace = True)\npredicted_label.columns = 'popularity', 'count'\npredicted_label['popularity'] = predicted_label['popularity'].map({1: 'Unpopular', 0: 'Popular'})\nprint('Each label count in predicted data:')\nprint('')\nprint(predicted_label)\n\n\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Let's visualize the Original label"
        },
        {
            "cell_type": "code",
            "execution_count": 40,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 504x288 with 1 Axes>"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": "#Visualization of Original label\n\n#cleating a list of labels\nlab1 = original_label.iloc[0,1]\nlab2 = original_label.iloc[1,1]\nlab = [f\"Popular: {lab1}\", f\"Unpopular: {lab2}\"]\n\n#creating the list of count data\ndata = original_label['count'].tolist()\n\n\n#plotting pie chart\nfig, ax = plt.subplots(figsize=(7, 4), subplot_kw=dict(aspect=\"equal\"))\n\nwedges, texts = ax.pie(original_label['count'], wedgeprops=dict(width=0.5), startangle=-90)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(lab[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Original labels: Number of Popular vs Unpopular\")\n\nplt.show()\n\n\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Let's Visualize the Predicted label"
        },
        {
            "cell_type": "code",
            "execution_count": 41,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "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\n",
                        "text/plain": "<Figure size 504x288 with 1 Axes>"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": "#Visualization of Predicted label\n\n#cleating a list of labels\nlab1 = predicted_label.iloc[0,1]\nlab2 = predicted_label.iloc[1,1]\nlab = [f\"Popular: {lab1}\", f\"Unpopular: {lab2}\"]\n\n#creating the list of count data\ndata = original_label['count'].tolist()\n\n\n#plotting pie chart\nfig, ax = plt.subplots(figsize=(7, 4), subplot_kw=dict(aspect=\"equal\"))\n\nwedges, texts = ax.pie(original_label['count'], wedgeprops=dict(width=0.5), startangle=-90)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(lab[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Predicted labels: Number of Popular vs Unpopular\")\n\nplt.show()\n\n\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='insights'></a>\n## 11. Insights\nLet's find important features from best model"
        },
        {
            "cell_type": "code",
            "execution_count": 42,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "SparseVector(58, {0: 0.0279, 1: 0.0346, 2: 0.0341, 3: 0.0104, 4: 0.0203, 5: 0.0378, 6: 0.0208, 7: 0.0303, 8: 0.0159, 9: 0.016, 10: 0.0186, 11: 0.0126, 12: 0.0099, 13: 0.0142, 14: 0.0177, 15: 0.0122, 16: 0.0088, 17: 0.0361, 18: 0.0153, 19: 0.0099, 20: 0.0115, 21: 0.0044, 22: 0.0145, 23: 0.0226, 24: 0.0236, 25: 0.0448, 26: 0.0418, 27: 0.0161, 28: 0.0154, 29: 0.0027, 30: 0.0063, 31: 0.0029, 32: 0.0046, 33: 0.0096, 34: 0.012, 35: 0.0024, 36: 0.0102, 37: 0.0425, 38: 0.0256, 39: 0.0173, 40: 0.0284, 41: 0.0223, 42: 0.0222, 43: 0.0179, 44: 0.0167, 45: 0.0095, 46: 0.0078, 47: 0.0117, 48: 0.0152, 49: 0.0256, 50: 0.0097, 51: 0.0079, 52: 0.01, 53: 0.0138, 54: 0.0116, 55: 0.0129, 56: 0.013, 57: 0.0096})"
                    },
                    "execution_count": 42,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# Getting the important features for GBTclassifier model\ngbt_model.featureImportances"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Since the above result is in sparce vector where feature names are not clear, we will convert it into more readable format."
        },
        {
            "cell_type": "code",
            "execution_count": 43,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>features</th>\n      <th>features_normalized</th>\n      <th>rawPrediction</th>\n      <th>probability</th>\n      <th>prediction</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>[12.0, 226.0, 0.531400963616, 0.999999992308, ...</td>\n      <td>[0.0001608589674671973, 0.0030295105539655492,...</td>\n      <td>[0.3799928183685576, -0.3799928183685576]</td>\n      <td>[0.6813506153610732, 0.3186493846389268]</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.0</td>\n      <td>[9.0, 421.0, 0.525423727541, 0.999999995708, 0...</td>\n      <td>[1.0486144240863786e-05, 0.0004905185250448505...</td>\n      <td>[0.25473710656023724, -0.25473710656023724]</td>\n      <td>[0.6246832096639412, 0.3753167903360588]</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0</td>\n      <td>[11.0, 240.0, 0.556521736711, 0.999999991935, ...</td>\n      <td>[1.2074403481123171e-05, 0.0002634415304972328...</td>\n      <td>[0.4929633251290931, -0.4929633251290931]</td>\n      <td>[0.7282826091378319, 0.27171739086216806]</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0</td>\n      <td>[11.0, 781.0, 0.495495494858, 0.999999997849, ...</td>\n      <td>[1.2417617378829086e-05, 0.0008816508338968652...</td>\n      <td>[-0.8255549282099479, 0.8255549282099479]</td>\n      <td>[0.1609590057240842, 0.8390409942759158]</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "   label                                           features  \\\n0    0.0  [12.0, 226.0, 0.531400963616, 0.999999992308, ...   \n1    0.0  [9.0, 421.0, 0.525423727541, 0.999999995708, 0...   \n2    0.0  [11.0, 240.0, 0.556521736711, 0.999999991935, ...   \n3    0.0  [11.0, 781.0, 0.495495494858, 0.999999997849, ...   \n\n                                 features_normalized  \\\n0  [0.0001608589674671973, 0.0030295105539655492,...   \n1  [1.0486144240863786e-05, 0.0004905185250448505...   \n2  [1.2074403481123171e-05, 0.0002634415304972328...   \n3  [1.2417617378829086e-05, 0.0008816508338968652...   \n\n                                 rawPrediction  \\\n0    [0.3799928183685576, -0.3799928183685576]   \n1  [0.25473710656023724, -0.25473710656023724]   \n2    [0.4929633251290931, -0.4929633251290931]   \n3    [-0.8255549282099479, 0.8255549282099479]   \n\n                                 probability  prediction  \n0   [0.6813506153610732, 0.3186493846389268]         0.0  \n1   [0.6246832096639412, 0.3753167903360588]         0.0  \n2  [0.7282826091378319, 0.27171739086216806]         0.0  \n3   [0.1609590057240842, 0.8390409942759158]         1.0  "
                    },
                    "execution_count": 43,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "#transforming the dataset with the model and saving it in a dataframe called df_new\ndf_new = gbt_model.transform(df_transformed)\ndf_new.limit(4).toPandas()"
        },
        {
            "cell_type": "code",
            "execution_count": 44,
            "metadata": {},
            "outputs": [],
            "source": "#Creating a function to get important features \ndef ExtractImpFeatures(featureImp, dataset, featuresCol):\n    list_extract = []\n    for i in dataset.schema[featuresCol].metadata[\"ml_attr\"][\"attrs\"]:\n        list_extract = list_extract + dataset.schema[featuresCol].metadata[\"ml_attr\"][\"attrs\"][i]\n    varlist = pd.DataFrame(list_extract)\n    varlist['score'] = varlist['idx'].apply(lambda x: featureImp[x])\n    return(varlist.sort_values('score', ascending = False))\n\n"
        },
        {
            "cell_type": "code",
            "execution_count": 45,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Number of columns in data 61\nNumber of descriptive columns 61\n"
                },
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>descriptive_col</th>\n      <th>original_col</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>URL of the article (non-predictive)</td>\n      <td>url</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Days between the article publication and the d...</td>\n      <td>timedelta</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Number of words in the title</td>\n      <td>n_tokens_title</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Number of words in the content</td>\n      <td>n_tokens_content</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Rate of unique words in the content</td>\n      <td>n_unique_tokens</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Rate of non-stop words in the content</td>\n      <td>n_non_stop_words</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Rate of unique non-stop words in the content</td>\n      <td>n_non_stop_unique_tokens</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Number of links</td>\n      <td>num_hrefs</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Number of links to other articles published by...</td>\n      <td>num_self_hrefs</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Number of images</td>\n      <td>num_imgs</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Number of videos</td>\n      <td>num_videos</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Average length of the words in the content</td>\n      <td>average_token_length</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Number of keywords in the metadata</td>\n      <td>num_keywords</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Is data channel 'Lifestyle'?</td>\n      <td>data_channel_is_lifestyle</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Is data channel 'Entertainment'?</td>\n      <td>data_channel_is_entertainment</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Is data channel 'Business'?</td>\n      <td>data_channel_is_bus</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Is data channel 'Social Media'?</td>\n      <td>data_channel_is_socmed</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Is data channel 'Tech'?</td>\n      <td>data_channel_is_tech</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Is data channel 'World'?</td>\n      <td>data_channel_is_world</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Worst keyword (min. shares)</td>\n      <td>kw_min_min</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Worst keyword (max. shares)</td>\n      <td>kw_max_min</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Worst keyword (avg. shares)</td>\n      <td>kw_avg_min</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Best keyword (min. shares)</td>\n      <td>kw_min_max</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Best keyword (max. shares)</td>\n      <td>kw_max_max</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Best keyword (avg. shares)</td>\n      <td>kw_avg_max</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Avg. keyword (min. shares)</td>\n      <td>kw_min_avg</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Avg. keyword (max. shares)</td>\n      <td>kw_max_avg</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Avg. keyword (avg. shares)</td>\n      <td>kw_avg_avg</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Min. shares of referenced articles in Mashable</td>\n      <td>self_reference_min_shares</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Max. shares of referenced articles in Mashable</td>\n      <td>self_reference_max_shares</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Was the article published on a Monday?</td>\n      <td>weekday_is_monday</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Was the article published on a Tuesday?</td>\n      <td>weekday_is_tuesday</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Was the article published on a Wednesday?</td>\n      <td>weekday_is_wednesday</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Was the article published on a Thursday?</td>\n      <td>weekday_is_thursday</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Was the article published on a Friday?</td>\n      <td>weekday_is_friday</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>Was the article published on a Saturday?</td>\n      <td>weekday_is_saturday</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>Was the article published on a Sunday?</td>\n      <td>weekday_is_sunday</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Was the article published on the weekend?</td>\n      <td>is_weekend</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>Closeness to LDA topic 0</td>\n      <td>LDA_00</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>Closeness to LDA topic 1</td>\n      <td>LDA_01</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>Closeness to LDA topic 2</td>\n      <td>LDA_02</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>Closeness to LDA topic 3</td>\n      <td>LDA_03</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>Closeness to LDA topic 4</td>\n      <td>LDA_04</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Text subjectivity</td>\n      <td>global_subjectivity</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>Text sentiment polarity</td>\n      <td>global_sentiment_polarity</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>Rate of positive words in the content</td>\n      <td>global_rate_positive_words</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>Rate of negative words in the content</td>\n      <td>global_rate_negative_words</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>Rate of positive words among non-neutral tokens</td>\n      <td>rate_positive_words</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>Rate of negative words among non-neutral tokens</td>\n      <td>rate_negative_words</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>Avg. polarity of positive words</td>\n      <td>avg_positive_polarity</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>Min. polarity of positive words</td>\n      <td>min_positive_polarity</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>Max. polarity of positive words</td>\n      <td>max_positive_polarity</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>Avg. polarity of negative words</td>\n      <td>avg_negative_polarity</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>Min. polarity of negative words</td>\n      <td>min_negative_polarity</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>Max. polarity of negative words</td>\n      <td>max_negative_polarity</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>Title subjectivity</td>\n      <td>title_subjectivity</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>Title polarity</td>\n      <td>title_sentiment_polarity</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>Absolute subjectivity level</td>\n      <td>abs_title_subjectivity</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>Absolute polarity level</td>\n      <td>abs_title_sentiment_polarity</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>Number of shares (target)</td>\n      <td>shares</td>\n    </tr>\n  </tbody>\n</table>\n<p>61 rows \u00d7 2 columns</p>\n</div>",
                        "text/plain": "                                      descriptive_col  \\\n0                 URL of the article (non-predictive)   \n1   Days between the article publication and the d...   \n2                        Number of words in the title   \n3                      Number of words in the content   \n4                 Rate of unique words in the content   \n5               Rate of non-stop words in the content   \n6        Rate of unique non-stop words in the content   \n7                                     Number of links   \n8   Number of links to other articles published by...   \n9                                    Number of images   \n10                                   Number of videos   \n11         Average length of the words in the content   \n12                 Number of keywords in the metadata   \n13                       Is data channel 'Lifestyle'?   \n14                   Is data channel 'Entertainment'?   \n15                        Is data channel 'Business'?   \n16                    Is data channel 'Social Media'?   \n17                            Is data channel 'Tech'?   \n18                           Is data channel 'World'?   \n19                        Worst keyword (min. shares)   \n20                        Worst keyword (max. shares)   \n21                        Worst keyword (avg. shares)   \n22                         Best keyword (min. shares)   \n23                         Best keyword (max. shares)   \n24                         Best keyword (avg. shares)   \n25                         Avg. keyword (min. shares)   \n26                         Avg. keyword (max. shares)   \n27                         Avg. keyword (avg. shares)   \n28     Min. shares of referenced articles in Mashable   \n29     Max. shares of referenced articles in Mashable   \n..                                                ...   \n31             Was the article published on a Monday?   \n32            Was the article published on a Tuesday?   \n33          Was the article published on a Wednesday?   \n34           Was the article published on a Thursday?   \n35             Was the article published on a Friday?   \n36           Was the article published on a Saturday?   \n37             Was the article published on a Sunday?   \n38          Was the article published on the weekend?   \n39                           Closeness to LDA topic 0   \n40                           Closeness to LDA topic 1   \n41                           Closeness to LDA topic 2   \n42                           Closeness to LDA topic 3   \n43                           Closeness to LDA topic 4   \n44                                  Text subjectivity   \n45                            Text sentiment polarity   \n46              Rate of positive words in the content   \n47              Rate of negative words in the content   \n48    Rate of positive words among non-neutral tokens   \n49    Rate of negative words among non-neutral tokens   \n50                    Avg. polarity of positive words   \n51                    Min. polarity of positive words   \n52                    Max. polarity of positive words   \n53                    Avg. polarity of negative words   \n54                    Min. polarity of negative words   \n55                    Max. polarity of negative words   \n56                                 Title subjectivity   \n57                                     Title polarity   \n58                        Absolute subjectivity level   \n59                            Absolute polarity level   \n60                          Number of shares (target)   \n\n                     original_col  \n0                             url  \n1                       timedelta  \n2                  n_tokens_title  \n3                n_tokens_content  \n4                 n_unique_tokens  \n5                n_non_stop_words  \n6        n_non_stop_unique_tokens  \n7                       num_hrefs  \n8                  num_self_hrefs  \n9                        num_imgs  \n10                     num_videos  \n11           average_token_length  \n12                   num_keywords  \n13      data_channel_is_lifestyle  \n14  data_channel_is_entertainment  \n15            data_channel_is_bus  \n16         data_channel_is_socmed  \n17           data_channel_is_tech  \n18          data_channel_is_world  \n19                     kw_min_min  \n20                     kw_max_min  \n21                     kw_avg_min  \n22                     kw_min_max  \n23                     kw_max_max  \n24                     kw_avg_max  \n25                     kw_min_avg  \n26                     kw_max_avg  \n27                     kw_avg_avg  \n28      self_reference_min_shares  \n29      self_reference_max_shares  \n..                            ...  \n31              weekday_is_monday  \n32             weekday_is_tuesday  \n33           weekday_is_wednesday  \n34            weekday_is_thursday  \n35              weekday_is_friday  \n36            weekday_is_saturday  \n37              weekday_is_sunday  \n38                     is_weekend  \n39                         LDA_00  \n40                         LDA_01  \n41                         LDA_02  \n42                         LDA_03  \n43                         LDA_04  \n44            global_subjectivity  \n45      global_sentiment_polarity  \n46     global_rate_positive_words  \n47     global_rate_negative_words  \n48            rate_positive_words  \n49            rate_negative_words  \n50          avg_positive_polarity  \n51          min_positive_polarity  \n52          max_positive_polarity  \n53          avg_negative_polarity  \n54          min_negative_polarity  \n55          max_negative_polarity  \n56             title_subjectivity  \n57       title_sentiment_polarity  \n58         abs_title_subjectivity  \n59   abs_title_sentiment_polarity  \n60                         shares  \n\n[61 rows x 2 columns]"
                    },
                    "execution_count": 45,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "##In order to get descriptive column let's replace column names with their descriptions\n\n#list of original column names\noriginal_col = df_.columns\nprint('Number of columns in data',len(original_col))\n\n#list of descriptive column names\ndescriptive_col = ['URL of the article (non-predictive)',\n          'Days between the article publication and the dataset acquisition (non-predictive)',\n          'Number of words in the title',\n          'Number of words in the content',\n          'Rate of unique words in the content',\n          'Rate of non-stop words in the content',\n          'Rate of unique non-stop words in the content',\n          'Number of links',\n          'Number of links to other articles published by Mashable',\n          'Number of images',\n          'Number of videos',\n          'Average length of the words in the content',\n           'Number of keywords in the metadata',\n           \"Is data channel 'Lifestyle'?\",\n           \"Is data channel 'Entertainment'?\",\n           \"Is data channel 'Business'?\",\n           \"Is data channel 'Social Media'?\",\n           \"Is data channel 'Tech'?\",\n           \"Is data channel 'World'?\",\n           \"Worst keyword (min. shares)\",\n           \"Worst keyword (max. shares)\",\n           \"Worst keyword (avg. shares)\",\n           \"Best keyword (min. shares)\",\n           \"Best keyword (max. shares)\",\n           \"Best keyword (avg. shares)\",\n           \"Avg. keyword (min. shares)\",\n           \"Avg. keyword (max. shares)\",\n           \"Avg. keyword (avg. shares)\",\n           \"Min. shares of referenced articles in Mashable\",\n           \"Max. shares of referenced articles in Mashable\",\n           \"Avg. shares of referenced articles in Mashable\",\n           \"Was the article published on a Monday?\",\n           \"Was the article published on a Tuesday?\",\n           \"Was the article published on a Wednesday?\",\n           \"Was the article published on a Thursday?\",\n           \"Was the article published on a Friday?\",\n           \"Was the article published on a Saturday?\",\n           \"Was the article published on a Sunday?\",\n           \"Was the article published on the weekend?\",\n           \"Closeness to LDA topic 0\",\n           \"Closeness to LDA topic 1\",\n           \"Closeness to LDA topic 2\",\n           \"Closeness to LDA topic 3\",\n           \"Closeness to LDA topic 4\",\n           \"Text subjectivity\",\n           \"Text sentiment polarity\",\n           \"Rate of positive words in the content\",\n           \"Rate of negative words in the content\",\n           \"Rate of positive words among non-neutral tokens\",\n           \"Rate of negative words among non-neutral tokens\",\n           \"Avg. polarity of positive words\",\n           \"Min. polarity of positive words\",\n           \"Max. polarity of positive words\",\n           \"Avg. polarity of negative words\",\n           \"Min. polarity of negative words\",\n           \"Max. polarity of negative words\",\n           \"Title subjectivity\",\n           \"Title polarity\",\n           \"Absolute subjectivity level\",\n           \"Absolute polarity level\",\n           \"Number of shares (target)\"]  \nprint('Number of descriptive columns',len(descriptive_col))\n\n#Let's cross check both the column names by creating a dataframe using them \ndf_column_name = pd.DataFrame(original_col, descriptive_col)\ndf_column_name.reset_index(inplace=True)\ndf_column_name.columns = 'descriptive_col','original_col'\ndf_column_name"
        },
        {
            "cell_type": "code",
            "execution_count": 46,
            "metadata": {
                "pixiedust": {
                    "displayParams": {
                        "handlerId": "barChart",
                        "keyFields": "score"
                    }
                }
            },
            "outputs": [
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 1080x720 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "# Getting top 20 important features\nfeature_imp_20 = ExtractImpFeatures(gbt_model.featureImportances, df_new, \"features\").head(20)\n\n\n# Listing the name of top 20 imp features\nlist_feature_imp_20 = ExtractImpFeatures(gbt_model.featureImportances, df_new, \"features\").head(20)['name'].tolist()\n\n#created a dict for original and descriptive column\ncol_dict = {}\nfor m,n in zip(original_col, descriptive_col):\n    col_dict.update({m:n})\n\n#get the original name for important features as key's value\noriginal_name_imp = [ col_dict[n] for n in list_feature_imp_20 ]\n\n#adding original_name_imp as a new column\nfeature_imp_20['original_name_imp'] = original_name_imp\nfeature_imp_20['score'] = feature_imp_20['score'] *100\nfeature_imp_20 = feature_imp_20[['original_name_imp', \"score\" ]]\n\n# plotting the features\nplt.figure(figsize = (15,10))\nax = sns.barplot(feature_imp_20['score'], feature_imp_20['original_name_imp'], palette = 'Set2', edgecolor = '#5d5d63')\nax.set_title('20 most important feature that affects popularity')\nax.set_xlabel('Score*100', fontsize = 15)\nax.set_ylabel('Features', fontsize = 15)\n\n#getting score to 2 number after decimal\ntop_20 = [n for n in feature_imp_20['score'].map('{:,.2f}'.format)]\n\n#annotating the bars\ni=0.18\nfor n in top_20:\n        label = n\n        ax.annotate(label ,xy=(float(n)-0.18,i), color='black',size =10)\n        i = 1+i\nplt.show()\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "<a id='conclusion'></a>\n## 11. Conclusion and future directions"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Gradient boosting tree classifier, an ensemble learning algorithm, tackle the challenge of classifying popular news articles from unpopular articles by measuring the count of shares. It is able to predict popularity using only statistical features associated\nwith original news articles without using the original content of news articles. <br>\n\nFuture work will include:\n\n - Exploration of more advanced features extraction techniques. \n -  Exploring the possibility of including content based features like trend analysis.\n - Evaluation of the prediction model on more complex and more unbalanced popularity prediction datasets. \n - Comparison of the model with many other state-of-the-art techniques."
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": ""
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.6 with Spark",
            "language": "python3",
            "name": "python36"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.6.8"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 1
}